diff --git a/config/knexfile.ts b/config/knexfile.ts
index bed704b..ea1910f 100644
--- a/config/knexfile.ts
+++ b/config/knexfile.ts
@@ -37,5 +37,3 @@ const Config = {
 }
 
 export default Config
-/* Export is required to expose config to knex to seed and migrate containerised local mysql instance */
-module.exports = Config
diff --git a/src/lib/db.ts b/src/lib/db.ts
index 18099de..b0aaa96 100644
--- a/src/lib/db.ts
+++ b/src/lib/db.ts
@@ -30,10 +30,13 @@
 import Knex from 'knex'
 import Config from '../../config/knexfile'
 import ConsentDB from '../model/consent'
+import ScopeDB from '../model/scope'
 
 const Db: Knex = Knex(Config.test)
 const consentDB: ConsentDB = new ConsentDB(Db)
+const scopeDB: ScopeDB = new ScopeDB(Db)
 
 export {
-  consentDB
+  consentDB,
+  scopeDB
 }
diff --git a/src/model/scope/index.ts b/src/model/scope/index.ts
new file mode 100644
index 0000000..e5d87bf
--- /dev/null
+++ b/src/model/scope/index.ts
@@ -0,0 +1,33 @@
+/*****
+ License
+ --------------
+ Copyright © 2020 Mojaloop Foundation
+ The Mojaloop files are made available by the Mojaloop Foundation under the
+ Apache License, Version 2.0 (the 'License') and you may not use these files
+ except in compliance with the License. You may obtain a copy of the License at
+ http://www.apache.org/licenses/LICENSE-2.0
+ Unless required by applicable law or agreed to in writing, the Mojaloop
+ files are distributed onan 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
+ ANY KIND, either express or implied. See the License for the specific language
+ governing permissions and limitations under the License.
+ Contributors
+ --------------
+ This is the official list of the Mojaloop project contributors for this file.
+ Names of the original copyright holders (individuals or organizations)
+ should be listed with a '*' in the first column. People who have
+ contributed from an organization can be listed under the organization
+ that actually holds the copyright for their contributions (see the
+ Gates Foundation organization for an example). Those individuals should have
+ their names indented and be marked with a '-'. Email address can be added
+ optionally within square brackets <email>.
+ * Gates Foundation
+ - Name Surname <name.surname@gatesfoundation.com>
+
+ - Raman Mangla <ramanmangla@google.com>
+ --------------
+ ******/
+
+export {
+  Scope,
+  ScopeDB as default
+} from './scope'
diff --git a/src/model/scope/scope.ts b/src/model/scope/scope.ts
new file mode 100644
index 0000000..60ab267
--- /dev/null
+++ b/src/model/scope/scope.ts
@@ -0,0 +1,98 @@
+/* istanbul ignore file */
+
+/*
+ * This flag is to ignore BDD testing for model
+ * which will be addressed in a future ticket
+ */
+
+/*****
+ License
+ --------------
+ Copyright © 2020 Mojaloop Foundation
+ The Mojaloop files are made available by the Mojaloop Foundation under the
+ Apache License, Version 2.0 (the 'License') and you may not use these files
+ except in compliance with the License. You may obtain a copy of the License at
+ http://www.apache.org/licenses/LICENSE-2.0
+ Unless required by applicable law or agreed to in writing, the Mojaloop
+ files are distributed onan 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
+ ANY KIND, either express or implied. See the License for the specific language
+ governing permissions and limitations under the License.
+ Contributors
+ --------------
+ This is the official list of the Mojaloop project contributors for this file.
+ Names of the original copyright holders (individuals or organizations)
+ should be listed with a '*' in the first column. People who have
+ contributed from an organization can be listed under the organization
+ that actually holds the copyright for their contributions (see the
+ Gates Foundation organization for an example). Those individuals should have
+ their names indented and be marked with a '-'. Email address can be added
+ optionally within square brackets <email>.
+ * Gates Foundation
+ - Name Surname <name.surname@gatesfoundation.com>
+
+ - Raman Mangla <ramanmangla@google.com>
+ --------------
+ ******/
+
+import Knex from 'knex'
+import { NotFoundError } from '../errors'
+
+/*
+* Interface for Scope resource type
+*/
+export interface Scope {
+  id?: number;
+  consentId: string;
+  action: string;
+  accountId: string;
+}
+
+/*
+ * Class to abstract Scope DB operations
+ */
+export class ScopeDB {
+  // Knex instance
+  private Db: Knex
+
+  public constructor (dbInstance: Knex) {
+    this.Db = dbInstance
+  }
+
+  // Add a single Scope or an array of Scopes
+  public async register (scopes: Scope | Scope[]): Promise<number> {
+    // Returns array containing number of inserted rows
+    const insertCount: number[] = await this
+      .Db<Scope>('Scope')
+      .insert(scopes)
+
+    return insertCount[0]
+  }
+
+  // Retrieve Scopes by Consent ID
+  public async retrieveAll (consentId: string): Promise<Scope[]> {
+    const scopes: Scope[] = await this
+      .Db<Scope>('Scope')
+      .select('*')
+      .where({ consentId: consentId })
+
+    if (scopes.length === 0) {
+      throw new NotFoundError('Scope', consentId)
+    }
+
+    return scopes
+  }
+
+  // Delete Scopes by Consent ID
+  public async deleteAll (consentId: string): Promise<number> {
+    const deleteCount: number = await this
+      .Db<Scope>('Scope')
+      .where({ consentId: consentId })
+      .del()
+
+    if (deleteCount === 0) {
+      throw new NotFoundError('Scope', consentId)
+    }
+
+    return deleteCount
+  }
+}
diff --git a/test/unit/model/scope.test.ts b/test/unit/model/scope.test.ts
new file mode 100644
index 0000000..423970f
--- /dev/null
+++ b/test/unit/model/scope.test.ts
@@ -0,0 +1,198 @@
+/*****
+ License
+ --------------
+ Copyright © 2020 Mojaloop Foundation
+ The Mojaloop files are made available by the Mojaloop Foundation under the
+ Apache License, Version 2.0 (the 'License') and you may not use these files
+ except in compliance with the License. You may obtain a copy of the License at
+ http://www.apache.org/licenses/LICENSE-2.0
+ Unless required by applicable law or agreed to in writing, the Mojaloop
+ files are distributed onan 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
+ ANY KIND, either express or implied. See the License for the specific language
+ governing permissions and limitations under the License.
+ Contributors
+ --------------
+ This is the official list of the Mojaloop project contributors for this file.
+ Names of the original copyright holders (individuals or organizations)
+ should be listed with a '*' in the first column. People who have
+ contributed from an organization can be listed under the organization
+ that actually holds the copyright for their contributions (see the
+ Gates Foundation organization for an example). Those individuals should have
+ their names indented and be marked with a '-'. Email address can be added
+ optionally within square brackets <email>.
+ * Gates Foundation
+ - Name Surname <name.surname@gatesfoundation.com>
+
+ - Raman Mangla <ramanmangla@google.com>
+ --------------
+ ******/
+
+import Knex from 'knex'
+import Config from '../../../config/knexfile'
+import ScopeDB, { Scope } from '../../../src/model/scope'
+import { Consent } from '../../../src/model/consent'
+
+/*
+ * Mock Consent Resource
+ */
+const partialConsent: Consent = {
+  id: '1234',
+  initiatorId: 'pisp-2342-2233',
+  participantId: 'dfsp-3333-2123'
+}
+
+/*
+ * Mock Scope Resources
+ */
+const tempScope: Scope = {
+  consentId: '1234',
+  action: 'transfer',
+  accountId: 'sjdn-3333-2123'
+}
+
+const tempScope2: Scope = {
+  consentId: '1234',
+  action: 'balance',
+  accountId: 'sjdn-q333-2123'
+}
+
+/*
+ * Scope Resource Model Unit Tests
+ */
+describe('src/model/scope', (): void => {
+  let Db: Knex
+  let scopeDB: ScopeDB
+
+  beforeAll(async (): Promise<void> => {
+    Db = Knex(Config.test)
+    await Db.migrate.latest()
+    // Enable Sqlite foreign key support
+    await Db.raw('PRAGMA foreign_keys = ON')
+
+    scopeDB = new ScopeDB(Db)
+  })
+
+  afterAll(async (): Promise<void> => {
+    Db.destroy()
+  })
+
+  // Reset table for new test
+  beforeEach(async (): Promise<void> => {
+    await Db<Consent>('Consent').del()
+    await Db<Scope>('Scope').del()
+  })
+
+  describe('register', (): void => {
+    it('adds scope for an existing consent to the database', async (): Promise<void> => {
+      // Setup
+      await Db<Consent>('Consent')
+        .insert(partialConsent)
+
+      await scopeDB.register(tempScope)
+
+      // Assertion
+      const scopes: Scope[] = await Db<Scope>('Scope')
+        .select('*')
+        .where({
+          consentId: partialConsent.id
+        })
+
+      expect(scopes.length).toEqual(1)
+      expect(scopes[0].id).toEqual(expect.any(Number))
+      expect(scopes[0]).toEqual(expect.objectContaining(tempScope))
+    })
+
+    it('adds multiple scopes for an existing consent to the database', async (): Promise<void> => {
+      // Setup
+      await Db<Consent>('Consent')
+        .insert(partialConsent)
+
+      await scopeDB.register([tempScope, tempScope2])
+
+      // Assertion
+      const scopes: Scope[] = await Db<Scope>('Scope')
+        .select('*')
+        .where({
+          consentId: partialConsent.id
+        })
+
+      expect(scopes.length).toEqual(2)
+      expect(scopes[0].consentId === scopes[1].consentId).toEqual(true)
+      expect(scopes[0].action !== scopes[1].action).toEqual(true)
+    })
+
+    it('returns an error on adding a scope for a non-existent consent', async (): Promise<void> => {
+      await expect(scopeDB.register(tempScope)).rejects.toThrowError()
+    })
+  })
+
+  describe('retrieveAll', (): void => {
+    it('retrieves only existing scopes from the database', async (): Promise<void> => {
+      // Setup
+      await Db<Consent>('Consent')
+        .insert(partialConsent)
+      await Db<Scope>('Scope')
+        .insert(tempScope)
+
+      // Action
+      const scopes: Scope[] = await scopeDB.retrieveAll(tempScope.consentId)
+
+      // Assertion
+      expect(scopes.length).toEqual(1)
+      expect(scopes[0].id).toEqual(expect.any(Number))
+      expect(scopes[0]).toEqual(expect.objectContaining(tempScope))
+    })
+
+    it('throws an error on retrieving of non-existent scopes', async (): Promise<void> => {
+      // Setup
+      await Db<Consent>('Consent')
+        .insert(partialConsent)
+
+      // Action
+      await expect(scopeDB.retrieveAll(partialConsent.id))
+        .rejects.toThrowError('NotFoundError: Scope for ConsentId 1234')
+    })
+  })
+
+  describe('deleteAll', (): void => {
+    it('deletes only existing scopes from the database', async (): Promise<void> => {
+      // Setup
+      await Db<Consent>('Consent')
+        .insert(partialConsent)
+      await Db<Scope>('Scope')
+        .insert(tempScope)
+      await Db<Scope>('Scope')
+        .insert(tempScope2)
+
+      let scopes: Scope[] = await Db<Scope>('Scope')
+        .select('*')
+        .where({
+          consentId: tempScope.consentId
+        })
+
+      expect(scopes.length).toEqual(2)
+
+      // Action
+      await scopeDB.deleteAll(tempScope.consentId)
+
+      // Assertion
+      scopes = await Db<Scope>('Scope')
+        .select('*')
+        .where({
+          consentId: tempScope.consentId
+        })
+
+      expect(scopes.length).toEqual(0)
+    })
+
+    it('throws an error on deleting non-existent scopes', async (): Promise<void> => {
+      // Setup
+      await Db<Consent>('Consent')
+        .insert(partialConsent)
+
+      // Action
+      await expect(scopeDB.deleteAll(partialConsent.id))
+        .rejects.toThrowError('NotFoundError: Scope for ConsentId 1234')
+    })
+  })
+})
