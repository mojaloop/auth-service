openapi: 3.0.1
info:
  title: Mojaloop Auth-Service API
  version: 0.1.0
  description: |
    An API a central auth service in Mojaloop, concerned with creating and
    managing Consents and validating thirdparty transactions
  license:
    name: >-
      Open API for FSP Interoperability (FSPIOP) (Implementation Friendly
      Version)
servers:
  - url: /
paths:
  /health:
    get:
      tags:
        - health
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '406':
          $ref: '#/components/responses/406'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
      operationId: HealthGet
      summary: Health check endpoint
      description: >-
        The HTTP request GET /health is used to return the current status of the
        API.
  /metrics:
    get:
      tags:
        - health
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '406':
          $ref: '#/components/responses/406'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
      operationId: MetricsGet
      summary: Prometheus metrics endpoint
      description: The HTTP request GET /metrics is used to return metrics for the API.
  /consents:
    parameters:
      - $ref: '#/components/parameters/Content-Type'
      - $ref: '#/components/parameters/Date'
      - $ref: '#/components/parameters/X-Forwarded-For'
      - $ref: '#/components/parameters/FSPIOP-Source'
      - $ref: '#/components/parameters/FSPIOP-Destination'
      - $ref: '#/components/parameters/FSPIOP-Encryption'
      - $ref: '#/components/parameters/FSPIOP-Signature'
      - $ref: '#/components/parameters/FSPIOP-URI'
      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    post:
      tags:
        - consents
        - sampled
      operationId: PostConsents
      summary: PostConsents
      description: >
        The **POST /consents** request is used to request the creation of a
        consent for interactions between a PISP and the DFSP who owns the
        account which a PISP’s customer wants to allow the PISP access to.
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ConsentsPostRequestAUTH'
                - $ref: '#/components/schemas/ConsentsPostRequestPISP'
      responses:
        '202':
          $ref: '#/components/responses/202'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '406':
          $ref: '#/components/responses/406'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
  /participants/{Type}/{ID}:
    parameters:
      - $ref: '#/components/parameters/Type'
      - $ref: '#/components/parameters/ID'
      - $ref: '#/components/parameters/Content-Type'
      - $ref: '#/components/parameters/Date'
      - $ref: '#/components/parameters/X-Forwarded-For'
      - $ref: '#/components/parameters/FSPIOP-Source'
      - $ref: '#/components/parameters/FSPIOP-Destination'
      - $ref: '#/components/parameters/FSPIOP-Encryption'
      - $ref: '#/components/parameters/FSPIOP-Signature'
      - $ref: '#/components/parameters/FSPIOP-URI'
      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    post:
      description: >-
        The HTTP request `POST /participants/{Type}/{ID}` (or `POST
        /participants/{Type}/{ID}/{SubId}`) is used to create information in the
        server regarding the provided identity, defined by `{Type}`, `{ID}`, and
        optionally `{SubId}` (for example, `POST /participants/MSISDN/123456789`
        or `POST /participants/BUSINESS/shoecompany/employee1`). An
        ExtensionList element has been added to this reqeust in version v1.1
      summary: Create participant information
      tags:
        - participants
        - sampled
      operationId: ParticipantsByIDAndType
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        description: Participant information to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantsTypeIDSubIDPostRequest'
      responses:
        '202':
          $ref: '#/components/responses/202'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '406':
          $ref: '#/components/responses/406'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
    get:
      description: >-
        The HTTP request `GET /participants/{Type}/{ID}` (or `GET
        /participants/{Type}/{ID}/{SubId}`) is used to find out in which FSP the
        requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}`,
        is located (for example, `GET /participants/MSISDN/123456789`, or `GET
        /participants/BUSINESS/shoecompany/employee1`). This HTTP request should
        support a query string for filtering of currency. To use filtering of
        currency, the HTTP request `GET /participants/{Type}/{ID}?currency=XYZ`
        should be used, where `XYZ` is the requested currency.
      summary: Look up participant information
      tags:
        - participants
      operationId: ParticipantsByTypeAndID
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        '202':
          $ref: '#/components/responses/202'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '406':
          $ref: '#/components/responses/406'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
    put:
      description: >-
        The callback `PUT /participants/{Type}/{ID}` (or `PUT
        /participants/{Type}/{ID}/{SubId}`) is used to inform the client of a
        successful result of the lookup, creation, or deletion of the FSP
        information related to the Party. If the FSP information is deleted, the
        fspId element should be empty; otherwise the element should include the
        FSP information for the Party.
      summary: Return participant information
      tags:
        - participants
      operationId: ParticipantsByTypeAndID3
      parameters:
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        description: Participant information returned.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantsTypeIDPutResponse'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '406':
          $ref: '#/components/responses/406'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
    delete:
      description: >-
        The HTTP request `DELETE /participants/{Type}/{ID}` (or `DELETE
        /participants/{Type}/{ID}/{SubId}`) is used to delete information in the
        server regarding the provided identity, defined by `{Type}` and `{ID}`)
        (for example, `DELETE /participants/MSISDN/123456789`), and optionally
        `{SubId}`. This HTTP request should support a query string to delete FSP
        information regarding a specific currency only. To delete a specific
        currency only, the HTTP request `DELETE
        /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is
        the requested currency.


        **Note:** The Account Lookup System should verify that it is the Party’s
        current FSP that is deleting the FSP information.
      summary: Delete participant information
      tags:
        - participants
      operationId: ParticipantsByTypeAndID2
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        '202':
          $ref: '#/components/responses/202'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '406':
          $ref: '#/components/responses/406'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
  /participants/{Type}/{ID}/error:
    parameters:
      - $ref: '#/components/parameters/Type'
      - $ref: '#/components/parameters/ID'
      - $ref: '#/components/parameters/Content-Type'
      - $ref: '#/components/parameters/Date'
      - $ref: '#/components/parameters/X-Forwarded-For'
      - $ref: '#/components/parameters/FSPIOP-Source'
      - $ref: '#/components/parameters/FSPIOP-Destination'
      - $ref: '#/components/parameters/FSPIOP-Encryption'
      - $ref: '#/components/parameters/FSPIOP-Signature'
      - $ref: '#/components/parameters/FSPIOP-URI'
      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    put:
      description: >-
        If the server is unable to find, create or delete the associated FSP of
        the provided identity, or another processing error occurred, the error
        callback `PUT /participants/{Type}/{ID}/error` (or `PUT
        /participants/{Type}/{ID}/{SubId}/error`) is used.
      summary: Return participant information error
      tags:
        - participants
        - sampled
      operationId: ParticipantsErrorByTypeAndID
      parameters:
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        description: Details of the error returned.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorInformationObject'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '406':
          $ref: '#/components/responses/406'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
  /thirdpartyRequests/verifications:
    parameters:
      - $ref: '#/components/parameters/Content-Type'
      - $ref: '#/components/parameters/Date'
      - $ref: '#/components/parameters/X-Forwarded-For'
      - $ref: '#/components/parameters/FSPIOP-Source'
      - $ref: '#/components/parameters/FSPIOP-Destination'
      - $ref: '#/components/parameters/FSPIOP-Encryption'
      - $ref: '#/components/parameters/FSPIOP-Signature'
      - $ref: '#/components/parameters/FSPIOP-URI'
      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    post:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PostThirdpartyRequestsVerifications
      summary: PostThirdpartyRequestsVerifications
      description: >
        The HTTP request `POST /thirdpartyRequests/verifications` is used by the
        DFSP to verify a third party authorization.
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        description: The thirdparty authorization details to verify
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: >-
                    #/components/schemas/ThirdpartyRequestsVerificationsPostRequestFIDO
                - $ref: >-
                    #/components/schemas/ThirdpartyRequestsVerificationsPostRequestGeneric
      responses:
        '202':
          $ref: '#/components/responses/202'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '406':
          $ref: '#/components/responses/406'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
components:
  responses:
    '200':
      description: OK
    '202':
      description: Accepted
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
    '405':
      description: Method Not Allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
    '406':
      description: Not Acceptable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
    '501':
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
    '503':
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
  headers:
    Content-Length:
      required: false
      schema:
        type: integer
      description: >-
        The `Content-Length` header field indicates the anticipated size of the
        payload body. Only sent if there is a body.


        **Note:** The API supports a maximum size of 5242880 bytes (5
        Megabytes).
    Content-Type:
      schema:
        type: string
      required: true
      description: >-
        The `Content-Type` header indicates the specific version of the API used
        to send the payload body.
  schemas:
    ErrorCode:
      title: ErrorCode
      type: string
      pattern: ^[1-9]\d{3}$
      description: >-
        The API data type ErrorCode is a JSON String of four characters,
        consisting of digits only. Negative numbers are not allowed. A leading
        zero is not allowed. Each error code in the API is a four-digit number,
        for example, 1234, where the first number (1 in the example) represents
        the high-level error category, the second number (2 in the example)
        represents the low-level error category, and the last two numbers (34 in
        the example) represent the specific error.
      example: '5100'
    ErrorDescription:
      title: ErrorDescription
      type: string
      minLength: 1
      maxLength: 128
      description: Error description string.
    ExtensionKey:
      title: ExtensionKey
      type: string
      minLength: 1
      maxLength: 32
      description: Extension key.
    ExtensionValue:
      title: ExtensionValue
      type: string
      minLength: 1
      maxLength: 128
      description: Extension value.
    Extension:
      title: Extension
      type: object
      description: Data model for the complex type Extension.
      properties:
        key:
          $ref: '#/components/schemas/ExtensionKey'
        value:
          $ref: '#/components/schemas/ExtensionValue'
      required:
        - key
        - value
    ExtensionList:
      title: ExtensionList
      type: object
      description: >-
        Data model for the complex type ExtensionList. An optional list of
        extensions, specific to deployment.
      properties:
        extension:
          type: array
          items:
            $ref: '#/components/schemas/Extension'
          minItems: 1
          maxItems: 16
          description: Number of Extension elements.
      required:
        - extension
    ErrorInformation:
      title: ErrorInformation
      type: object
      description: Data model for the complex type ErrorInformation.
      properties:
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
        errorDescription:
          $ref: '#/components/schemas/ErrorDescription'
        extensionList:
          $ref: '#/components/schemas/ExtensionList'
      required:
        - errorCode
        - errorDescription
    ErrorInformationResponse:
      title: ErrorInformationResponse
      type: object
      description: >-
        Data model for the complex type object that contains an optional element
        ErrorInformation used along with 4xx and 5xx responses.
      properties:
        errorInformation:
          $ref: '#/components/schemas/ErrorInformation'
    CorrelationId:
      title: CorrelationId
      type: string
      pattern: >-
        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      description: >-
        Identifier that correlates all messages of the same sequence. The API
        data type UUID (Universally Unique Identifier) is a JSON String in
        canonical format, conforming to [RFC
        4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
        regular expression for interoperability reasons. A UUID is always 36
        characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
      example: b51ec534-ee48-4575-b6a9-ead2955b8069
    AccountAddress:
      title: AccountAddress
      type: string
      description: >-
        The AccountAddress data type is a variable length string with a maximum
        size of 1023 characters and consists of:

        Alphanumeric characters, upper or lower case. (Addresses are
        case-sensitive so that they can contain data encoded in formats such as
        base64url.)

        - Underscore (_) - Tilde (~) - Hyphen (-) - Period (.) Addresses MUST
        NOT end in a period (.) character

        An entity providing accounts to parties (i.e. a participant) can provide
        any value for an AccountAddress that is meaningful to that entity. It
        does not need to provide an address that makes the account identifiable
        outside the entity's domain.

        IMPORTANT: The policy for defining addresses and the life-cycle of these
        is at the discretion of the address space owner (the payer DFSP in this
        case).

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3212-accountaddress
      pattern: ^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$
      minLength: 1
      maxLength: 1023
    ScopeAction:
      title: ScopeAction
      type: string
      description: >
        The ScopeAction element contains an access type which a PISP can request

        from a DFSP, or which a DFSP can grant to a PISP.

        It must be a member of the appropriate enumeration.


        - ACCOUNTS_GET_BALANCE: PISP can request a balance for the linked
        account

        - ACCOUNTS_TRANSFER: PISP can request a transfer of funds from the
        linked account in the DFSP

        - ACCOUNTS_STATEMENT: PISP can request a statement of individual
        transactions on a user's account
      enum:
        - ACCOUNTS_GET_BALANCE
        - ACCOUNTS_TRANSFER
        - ACCOUNTS_STATEMENT
    Scope:
      title: Scope
      type: object
      description: >-
        The Scope element contains an identifier defining, in the terms of a
        DFSP, an account on which access types can be requested or granted. It
        also defines the access types which are requested or granted.

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32121-scope
      properties:
        address:
          $ref: '#/components/schemas/AccountAddress'
        actions:
          type: array
          minItems: 1
          maxItems: 32
          items:
            $ref: '#/components/schemas/ScopeAction'
      required:
        - address
        - actions
    CredentialType:
      title: CredentialType
      type: string
      enum:
        - FIDO
        - GENERIC
      description: >-
        The type of the Credential. - "FIDO" - The credential is based on a FIDO
        challenge. Its payload is a FIDOPublicKeyCredentialAttestation object. -
        "GENERIC" - The credential is based on a simple public key validation.
        Its payload is a GenericCredential object.

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3226-credentialtype
    CredentialStatusPending:
      title: CredentialStatusPending
      type: string
      enum:
        - PENDING
      description: |
        The status of the Credential.
        - "PENDING" - The credential has been created, but has not been verified
    BinaryString:
      type: string
      pattern: ^[A-Za-z0-9-_]+[=]{0,2}$
      description: >-
        The API data type BinaryString is a JSON String. The string is a
        base64url  encoding of a string of raw bytes, where padding (character
        ‘=’) is added at the end of the data if needed to ensure that the string
        is a multiple of 4 characters. The length restriction indicates the
        allowed number of characters.
    GenericCredential:
      title: GenericCredential
      type: object
      description: >
        A publicKey + signature of a challenge for a generic public/private
        keypair.
      properties:
        publicKey:
          $ref: '#/components/schemas/BinaryString'
        signature:
          $ref: '#/components/schemas/BinaryString'
      required:
        - publicKey
        - signature
      additionalProperties: false
    FIDOPublicKeyCredentialAttestation:
      title: FIDOPublicKeyCredentialAttestation
      type: object
      description: >
        A data model representing a FIDO Attestation result. Derived from 

        [`PublicKeyCredential`
        Interface](https://w3c.github.io/webauthn/#iface-pkcredential).


        The `PublicKeyCredential` interface represents the below fields with

        a Type of Javascript
        [ArrayBuffer](https://heycam.github.io/webidl/#idl-ArrayBuffer).

        For this API, we represent ArrayBuffers as base64 encoded utf-8 strings.
      properties:
        id:
          type: string
          description: |
            credential id: identifier of pair of keys, base64 encoded
            https://w3c.github.io/webauthn/#ref-for-dom-credential-id
          minLength: 59
          maxLength: 118
        rawId:
          type: string
          description: |
            raw credential id: identifier of pair of keys, base64 encoded
          minLength: 59
          maxLength: 118
        response:
          type: object
          description: |
            AuthenticatorAttestationResponse
          properties:
            clientDataJSON:
              type: string
              description: |
                JSON string with client data
              minLength: 121
              maxLength: 512
            attestationObject:
              type: string
              description: |
                CBOR.encoded attestation object
              minLength: 306
              maxLength: 2048
          required:
            - clientDataJSON
            - attestationObject
          additionalProperties: false
        type:
          type: string
          description: response type, we need only the type of public-key
          enum:
            - public-key
      required:
        - id
        - response
        - type
      additionalProperties: false
    SignedCredential:
      title: SignedCredential
      type: object
      description: >
        A credential used to allow a user to prove their identity and access

        to an account with a DFSP.


        SignedCredential is a special formatting of the credential to allow us
        to be

        more explicit about the `status` field - it should only ever be PENDING
        when

        updating a credential.
      properties:
        credentialType:
          $ref: '#/components/schemas/CredentialType'
        status:
          $ref: '#/components/schemas/CredentialStatusPending'
        genericPayload:
          $ref: '#/components/schemas/GenericCredential'
        fidoPayload:
          $ref: '#/components/schemas/FIDOPublicKeyCredentialAttestation'
      required:
        - credentialType
        - status
      additionalProperties: false
    ConsentStatus:
      title: ConsentStatus
      type: string
      enum:
        - ISSUED
        - REVOKED
      description: |-
        Allowed values for the enumeration ConsentStatus
        - ISSUED - The consent has been issued by the DFSP
        - REVOKED - The consent has been revoked
    ConsentsPostRequestAUTH:
      title: ConsentPostRequestAUTH
      type: object
      description: |
        The object sent in a `POST /consents` request to the Auth-Service
        by a DFSP to store registered Consent and credential
      properties:
        consentId:
          allOf:
            - $ref: '#/components/schemas/CorrelationId'
          description: |
            Common ID between the PISP and FSP for the Consent object
            determined by the DFSP who creates the Consent.
        consentRequestId:
          $ref: '#/components/schemas/CorrelationId'
        scopes:
          minLength: 1
          maxLength: 256
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        credential:
          allOf:
            - $ref: '#/components/schemas/SignedCredential'
        status:
          $ref: '#/components/schemas/ConsentStatus'
        extensionList:
          $ref: '#/components/schemas/ExtensionList'
      required:
        - consentId
        - scopes
        - credential
        - status
      additionalProperties: false
    ConsentsPostRequestPISP:
      title: ConsentPostRequestPISP
      type: object
      description: |
        The provisional Consent object sent by the DFSP in `POST /consents`.
      properties:
        consentId:
          allOf:
            - $ref: '#/components/schemas/CorrelationId'
          description: >
            Common ID between the PISP and the Payer DFSP for the consent
            object. The ID

            should be reused for re-sends of the same consent. A new ID should
            be generated

            for each new consent.
        consentRequestId:
          allOf:
            - $ref: '#/components/schemas/CorrelationId'
          description: >
            The ID given to the original consent request on which this consent
            is based.
        scopes:
          type: array
          minLength: 1
          maxLength: 256
          items:
            $ref: '#/components/schemas/Scope'
        status:
          $ref: '#/components/schemas/ConsentStatus'
        extensionList:
          $ref: '#/components/schemas/ExtensionList'
      required:
        - consentId
        - consentRequestId
        - scopes
        - status
    FspId:
      title: FspId
      type: string
      minLength: 1
      maxLength: 32
      description: FSP identifier.
    ParticipantsTypeIDPutResponse:
      title: ParticipantsTypeIDPutResponse
      type: object
      description: >-
        The object sent in the PUT /participants/{Type}/{ID}/{SubId} and
        /participants/{Type}/{ID} callbacks.
      properties:
        fspId:
          $ref: '#/components/schemas/FspId'
    Currency:
      title: Currency
      description: >-
        The currency codes defined in [ISO
        4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter
        alphabetic codes are used as the standard naming representation for
        currencies.
      type: string
      minLength: 3
      maxLength: 3
      enum:
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BRL
        - BSD
        - BTN
        - BWP
        - BYN
        - BZD
        - CAD
        - CDF
        - CHF
        - CLP
        - CNY
        - COP
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ERN
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GGP
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - IMP
        - INR
        - IQD
        - IRR
        - ISK
        - JEP
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SPL
        - SRD
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRY
        - TTD
        - TVD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WST
        - XAF
        - XCD
        - XDR
        - XOF
        - XPF
        - XTS
        - XXX
        - YER
        - ZAR
        - ZMW
        - ZWD
    ParticipantsTypeIDSubIDPostRequest:
      title: ParticipantsTypeIDSubIDPostRequest
      type: object
      description: >-
        The object sent in the POST /participants/{Type}/{ID}/{SubId} and
        /participants/{Type}/{ID} requests. An additional optional ExtensionList
        element has been added as part of v1.1 changes.
      properties:
        fspId:
          $ref: '#/components/schemas/FspId'
        currency:
          $ref: '#/components/schemas/Currency'
        extensionList:
          $ref: '#/components/schemas/ExtensionList'
      required:
        - fspId
    ErrorInformationObject:
      title: ErrorInformationObject
      type: object
      description: Data model for the complex type object that contains ErrorInformation.
      properties:
        errorInformation:
          $ref: '#/components/schemas/ErrorInformation'
      required:
        - errorInformation
    SignedPayloadTypeFIDO:
      title: SignedPayloadTypeFIDO
      type: string
      enum:
        - FIDO
      description: Describes a challenge that has been signed with FIDO Attestation flows
    FIDOPublicKeyCredentialAssertion:
      title: FIDOPublicKeyCredentialAssertion
      type: object
      description: >
        A data model representing a FIDO Assertion result.

        Derived from PublicKeyCredential Interface in WebAuthN.


        The PublicKeyCredential interface represents the below fields with a
        Type of

        Javascript ArrayBuffer.

        For this API, we represent ArrayBuffers as base64 encoded utf-8 strings.


        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32128-fidopublickeycredentialassertion
      properties:
        id:
          type: string
          description: |
            credential id: identifier of pair of keys, base64 encoded
            https://w3c.github.io/webauthn/#ref-for-dom-credential-id
          minLength: 59
          maxLength: 118
        rawId:
          type: string
          description: |
            raw credential id: identifier of pair of keys, base64 encoded.
          minLength: 59
          maxLength: 118
        response:
          type: object
          description: |
            AuthenticatorAssertionResponse
          properties:
            authenticatorData:
              type: string
              description: |
                Authenticator data object.
              minLength: 49
              maxLength: 256
            clientDataJSON:
              type: string
              description: |
                JSON string with client data.
              minLength: 121
              maxLength: 512
            signature:
              type: string
              description: >
                The signature generated by the private key associated with this
                credential.
              minLength: 59
              maxLength: 256
            userHandle:
              type: string
              description: |
                This field is optionally provided by the authenticator, and
                represents the user.id that was supplied during registration.
              minLength: 1
              maxLength: 88
          required:
            - authenticatorData
            - clientDataJSON
            - signature
          additionalProperties: false
        type:
          type: string
          description: response type, we need only the type of public-key
          enum:
            - public-key
      required:
        - id
        - rawId
        - response
        - type
      additionalProperties: false
    ThirdpartyRequestsVerificationsPostRequestFIDO:
      title: ThirdpartyRequestsVerificationsPostRequestFIDO
      type: object
      description: The object sent in the POST /thirdpartyRequests/verifications request.
      properties:
        verificationRequestId:
          allOf:
            - $ref: '#/components/schemas/CorrelationId'
        challenge:
          type: string
          description: Base64 encoded bytes - The challenge generated by the DFSP.
        consentId:
          allOf:
            - $ref: '#/components/schemas/CorrelationId'
          description: >
            The id of the stored consent object that contains the credential
            with which to verify

            the signed challenge against.
        signedPayloadType:
          $ref: '#/components/schemas/SignedPayloadTypeFIDO'
        fidoSignedPayload:
          $ref: '#/components/schemas/FIDOPublicKeyCredentialAssertion'
        extensionList:
          $ref: '#/components/schemas/ExtensionList'
      required:
        - verificationRequestId
        - challenge
        - consentId
        - signedPayloadType
        - fidoSignedPayload
    SignedPayloadTypeGeneric:
      title: SignedPayloadTypeGeneric
      type: string
      enum:
        - GENERIC
      description: Describes a challenge that has been signed with a private key
    ThirdpartyRequestsVerificationsPostRequestGeneric:
      title: ThirdpartyRequestsVerificationsPostRequestGeneric
      type: object
      description: The object sent in the POST /thirdpartyRequests/verifications request.
      properties:
        verificationRequestId:
          allOf:
            - $ref: '#/components/schemas/CorrelationId'
        challenge:
          type: string
          description: Base64 encoded bytes - The challenge generated by the DFSP.
        consentId:
          allOf:
            - $ref: '#/components/schemas/CorrelationId'
          description: >
            The id of the stored consent object that contains the credential
            with which to verify

            the signed challenge against.
        signedPayloadType:
          $ref: '#/components/schemas/SignedPayloadTypeGeneric'
        genericSignedPayload:
          $ref: '#/components/schemas/BinaryString'
        extensionList:
          $ref: '#/components/schemas/ExtensionList'
      required:
        - verificationRequestId
        - challenge
        - consentId
        - signedPayloadType
        - genericSignedPayload
  parameters:
    Content-Type:
      name: Content-Type
      in: header
      schema:
        type: string
      required: true
      description: >-
        The `Content-Type` header indicates the specific version of the API used
        to send the payload body.
    Date:
      name: Date
      in: header
      schema:
        type: string
      required: true
      description: The `Date` header field indicates the date when the request was sent.
    X-Forwarded-For:
      name: X-Forwarded-For
      in: header
      schema:
        type: string
      required: false
      description: >-
        The `X-Forwarded-For` header field is an unofficially accepted standard
        used for informational purposes of the originating client IP address, as
        a request might pass multiple proxies, firewalls, and so on. Multiple
        `X-Forwarded-For` values should be expected and supported by
        implementers of the API.


        **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
        7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
        7239 is less-used and supported than `X-Forwarded-For`.
    FSPIOP-Source:
      name: FSPIOP-Source
      in: header
      schema:
        type: string
      required: true
      description: >-
        The `FSPIOP-Source` header field is a non-HTTP standard field used by
        the API for identifying the sender of the HTTP request. The field should
        be set by the original sender of the request. Required for routing and
        signature verification (see header field `FSPIOP-Signature`).
    FSPIOP-Destination:
      name: FSPIOP-Destination
      in: header
      schema:
        type: string
      required: false
      description: >-
        The `FSPIOP-Destination` header field is a non-HTTP standard field used
        by the API for HTTP header based routing of requests and responses to
        the destination. The field must be set by the original sender of the
        request if the destination is known (valid for all services except GET
        /parties) so that any entities between the client and the server do not
        need to parse the payload for routing purposes. If the destination is
        not known (valid for service GET /parties), the field should be left
        empty.
    FSPIOP-Encryption:
      name: FSPIOP-Encryption
      in: header
      schema:
        type: string
      required: false
      description: >-
        The `FSPIOP-Encryption` header field is a non-HTTP standard field used
        by the API for applying end-to-end encryption of the request.
    FSPIOP-Signature:
      name: FSPIOP-Signature
      in: header
      schema:
        type: string
      required: false
      description: >-
        The `FSPIOP-Signature` header field is a non-HTTP standard field used by
        the API for applying an end-to-end request signature.
    FSPIOP-URI:
      name: FSPIOP-URI
      in: header
      schema:
        type: string
      required: false
      description: >-
        The `FSPIOP-URI` header field is a non-HTTP standard field used by the
        API for signature verification, should contain the service URI. Required
        if signature verification is used, for more information, see [the API
        Signature
        document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    FSPIOP-HTTP-Method:
      name: FSPIOP-HTTP-Method
      in: header
      schema:
        type: string
      required: false
      description: >-
        The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used
        by the API for signature verification, should contain the service HTTP
        method. Required if signature verification is used, for more
        information, see [the API Signature
        document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    Accept:
      name: Accept
      in: header
      required: true
      schema:
        type: string
      description: >-
        The `Accept` header field indicates the version of the API the client
        would like the server to use.
    Content-Length:
      name: Content-Length
      in: header
      required: false
      schema:
        type: integer
      description: >-
        The `Content-Length` header field indicates the anticipated size of the
        payload body. Only sent if there is a body.


        **Note:** The API supports a maximum size of 5242880 bytes (5
        Megabytes).
    Type:
      name: Type
      in: path
      required: true
      schema:
        type: string
      description: The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`.
    ID:
      name: ID
      in: path
      required: true
      schema:
        type: string
      description: The identifier value.
