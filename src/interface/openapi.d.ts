/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/consents': {
    post: operations['PostConsents'];
  };
  '/consents/{ID}': {
    get: operations['GetConsent'];
    patch: operations['PatchConsentByID'];
    put: operations['PutConsentByID'];
    delete: operations['DeleteConsentByID'];
    parameters: {
      path: {
        ID: components['parameters']['ID'];
      };
      header: {
        'Content-Type': components['parameters']['Content-Type'];
        Date: components['parameters']['Date'];
        'X-Forwarded-For'?: components['parameters']['X-Forwarded-For'];
        'FSPIOP-Source': components['parameters']['FSPIOP-Source'];
        'FSPIOP-Destination'?: components['parameters']['FSPIOP-Destination'];
        'FSPIOP-Encryption'?: components['parameters']['FSPIOP-Encryption'];
        'FSPIOP-Signature'?: components['parameters']['FSPIOP-Signature'];
        'FSPIOP-URI'?: components['parameters']['FSPIOP-URI'];
        'FSPIOP-HTTP-Method'?: components['parameters']['FSPIOP-HTTP-Method'];
      };
    };
  };
  '/health': {
    get: operations['HealthGet'];
  };
  '/metrics': {
    get: operations['MetricsGet'];
  };
  '/thirdpartyRequests/transactions/{ID}/authorizations': {
    post: operations['VerifyThirdPartyAuthorization'];
    put: operations['UpdateThirdpartyAuthorization'];
    parameters: {
      path: {
        ID: components['parameters']['ID'];
      };
      header: {
        'Content-Length'?: components['parameters']['Content-Length'];
        'Content-Type': components['parameters']['Content-Type'];
        Date: components['parameters']['Date'];
        'X-Forwarded-For'?: components['parameters']['X-Forwarded-For'];
        'FSPIOP-Source': components['parameters']['FSPIOP-Source'];
        'FSPIOP-Destination'?: components['parameters']['FSPIOP-Destination'];
        'FSPIOP-Encryption'?: components['parameters']['FSPIOP-Encryption'];
        'FSPIOP-Signature'?: components['parameters']['FSPIOP-Signature'];
        'FSPIOP-URI'?: components['parameters']['FSPIOP-URI'];
        'FSPIOP-HTTP-Method'?: components['parameters']['FSPIOP-HTTP-Method'];
      };
    };
  };
}

export interface operations {
  /** DFSP sends this request to the PISP after granting consent. DFSP sends this request to an Auth service to validate a signed consent. */
  PostConsents: {
    parameters: {
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Length'?: components['parameters']['Content-Length'];
        'Content-Type': components['parameters']['Content-Type'];
        Date: components['parameters']['Date'];
        'X-Forwarded-For'?: components['parameters']['X-Forwarded-For'];
        'FSPIOP-Source': components['parameters']['FSPIOP-Source'];
        'FSPIOP-Destination'?: components['parameters']['FSPIOP-Destination'];
        'FSPIOP-Encryption'?: components['parameters']['FSPIOP-Encryption'];
        'FSPIOP-Signature'?: components['parameters']['FSPIOP-Signature'];
        'FSPIOP-URI'?: components['parameters']['FSPIOP-URI'];
        'FSPIOP-HTTP-Method'?: components['parameters']['FSPIOP-HTTP-Method'];
      };
    };
    requestBody: {
      'application/json':
      | components['schemas']['ConsentsPostRequestAUTH']
      | components['schemas']['ConsentsPostRequestPISP'];
    };
    responses: {
      202: components['responses']['202'];
      400: components['responses']['400'];
      401: components['responses']['401'];
      403: components['responses']['403'];
      404: components['responses']['404'];
      405: components['responses']['405'];
      406: components['responses']['406'];
      501: components['responses']['501'];
      503: components['responses']['503'];
    };
  };
  /** The HTTP request `GET /consents/{ID}` is used to get information regarding a consent object created or requested earlier. The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`. summary: GetConsent */
  GetConsent: {
    parameters: {
      header: {
        Accept: components['parameters']['Accept'];
      };
    };
    responses: {
      202: components['responses']['202'];
      400: components['responses']['400'];
      401: components['responses']['401'];
      403: components['responses']['403'];
      404: components['responses']['404'];
      405: components['responses']['405'];
      406: components['responses']['406'];
      501: components['responses']['501'];
      503: components['responses']['503'];
    };
  };
  /**
   * The HTTP request `PATCH /consents/{ID}` is used
   *
   * - In account linking in the Credential Registration phase. Used by a DFSP
   *   to notify a PISP a credential has been verified and registered with an
   *   Auth service.
   *
   * - In account unlinking by a hub hosted auth service and by DFSPs
   *   in non-hub hosted scenarios to notify participants of a consent being revoked.
   *
   *   Called by a `auth-service` to notify a PISP and DFSP of consent status in hub hosted scenario.
   *   Called by a `DFSP` to notify a PISP of consent status in non-hub hosted scenario.
   */
  PatchConsentByID: {
    parameters: {
      header: {
        'Content-Length'?: components['parameters']['Content-Length'];
      };
    };
    requestBody: {
      'application/json':
      | components['schemas']['ConsentsIDPatchResponseVerified']
      | components['schemas']['ConsentsIDPatchResponseRevoked'];
    };
    responses: {
      200: components['responses']['200'];
      400: components['responses']['400'];
      401: components['responses']['401'];
      403: components['responses']['403'];
      404: components['responses']['404'];
      405: components['responses']['405'];
      406: components['responses']['406'];
      501: components['responses']['501'];
      503: components['responses']['503'];
    };
  };
  /**
   * The HTTP request `PUT /consents/{ID}` is used by the PISP and Auth Service.
   *
   * - Called by a `PISP` to after signing a challenge. Sent to an DFSP for verification.
   * - Called by a `auth-service` to notify a DFSP that a credential has been verified and registered.
   */
  PutConsentByID: {
    parameters: {
      header: {
        'Content-Length'?: components['parameters']['Content-Length'];
      };
    };
    requestBody: {
      'application/json':
      | components['schemas']['ConsentsIDPutResponseSigned']
      | components['schemas']['ConsentsIDPutResponseVerified'];
    };
    responses: {
      200: components['responses']['200'];
      202: components['responses']['202'];
      400: components['responses']['400'];
      401: components['responses']['401'];
      403: components['responses']['403'];
      404: components['responses']['404'];
      405: components['responses']['405'];
      406: components['responses']['406'];
      501: components['responses']['501'];
      503: components['responses']['503'];
    };
  };
  /**
   * The HTTP request `DELETE /consents/{ID}` is used to mark as deleted a previously created consent.
   *
   * - Called by a PISP when a user wants to remove their consent.
   */
  DeleteConsentByID: {
    responses: {
      202: components['responses']['202'];
      400: components['responses']['400'];
      401: components['responses']['401'];
      403: components['responses']['403'];
      404: components['responses']['404'];
      405: components['responses']['405'];
      406: components['responses']['406'];
      501: components['responses']['501'];
      503: components['responses']['503'];
    };
  };
  /** The HTTP request GET /health is used to return the current status of the API. */
  HealthGet: {
    responses: {
      200: components['responses']['200'];
      400: components['responses']['400'];
      401: components['responses']['401'];
      403: components['responses']['403'];
      404: components['responses']['404'];
      405: components['responses']['405'];
      406: components['responses']['406'];
      501: components['responses']['501'];
      503: components['responses']['503'];
    };
  };
  /** The HTTP request GET /metrics is used to return metrics for the API. */
  MetricsGet: {
    responses: {
      200: components['responses']['200'];
      400: components['responses']['400'];
      401: components['responses']['401'];
      403: components['responses']['403'];
      404: components['responses']['404'];
      405: components['responses']['405'];
      406: components['responses']['406'];
      501: components['responses']['501'];
      503: components['responses']['503'];
    };
  };
  /** The HTTP request `POST /thirdpartyRequests/transactions/{id}/authorizations` is used by the DFSP to verify a third party authorization. */
  VerifyThirdPartyAuthorization: {
    parameters: {
      header: {
        Accept: components['parameters']['Accept'];
      };
    };
    requestBody: {
      'application/json': components['schemas']['ThirdpartyRequestsTransactionsIDAuthorizationsPostRequest'];
    };
    responses: {
      202: components['responses']['202'];
      400: components['responses']['400'];
      401: components['responses']['401'];
      403: components['responses']['403'];
      404: components['responses']['404'];
      405: components['responses']['405'];
      406: components['responses']['406'];
      501: components['responses']['501'];
      503: components['responses']['503'];
    };
  };
  /**
   * The HTTP request `PUT /thirdpartyRequests/transactions/{id}/authorizations` is used by the auth-service to update a thirdparty authorization after successful validation.
   * For an unsuccessful authorization result, the `PUT /thirdpartyRequests/transactions/{id}/authorizations/error` will be called by the auth-service, instead of this endpoint.
   */
  UpdateThirdpartyAuthorization: {
    requestBody: {
      'application/json': components['schemas']['ThirdpartyRequestsTransactionsIDAuthorizationsPutResponse'];
    };
    responses: {
      200: components['responses']['200'];
      400: components['responses']['400'];
      401: components['responses']['401'];
      403: components['responses']['403'];
      404: components['responses']['404'];
      405: components['responses']['405'];
      406: components['responses']['406'];
      501: components['responses']['501'];
      503: components['responses']['503'];
    };
  };
}

export interface components {
  parameters: {
    /** The `Accept` header field indicates the version of the API the client would like the server to use. */
    Accept: string;
    /**
     * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
     *
     * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
     */
    'Content-Length': number;
    /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
    'Content-Type': string;
    /** The `Date` header field indicates the date when the request was sent. */
    Date: string;
    /**
     * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
     *
     * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
     */
    'X-Forwarded-For': string;
    /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
    'FSPIOP-Source': string;
    /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
    'FSPIOP-Destination': string;
    /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
    'FSPIOP-Encryption': string;
    /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
    'FSPIOP-Signature': string;
    /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
    'FSPIOP-URI': string;
    /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
    'FSPIOP-HTTP-Method': string;
    /** The identifier value. */
    ID: string;
  };
  schemas: {
    /** Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘). */
    CorrelationId: string;
    /**
     * A long-lived unique account identifier provided by the DFSP. This MUST NOT
     * be Bank Account Number or anything that may expose a User's private bank
     * account information.
     */
    AccountId: string;
    /**
     * The scopes requested for a ConsentRequest.
     * - "accounts.getBalance" - Get the balance of a given account.
     * - "accounts.transfer" - Initiate a transfer from an account.
     */
    ConsentScopeType: 'accounts.getBalance' | 'accounts.transfer';
    /** Scope + Account Identifier mapping for a Consent. */
    Scope: {
      accountId: components['schemas']['AccountId'];
      actions: components['schemas']['ConsentScopeType'][];
    };
    /**
     * The type of the Credential.
     * - "FIDO" - A FIDO public/private keypair
     */
    CredentialType: 'FIDO';
    /**
     * An object sent in a `PUT /consents/{ID}` request.
     * Based on https://w3c.github.io/webauthn/#iface-pkcredential
     * and mostly on: https://webauthn.guide/#registration
     * AuthenticatorAttestationResponse
     * https://w3c.github.io/webauthn/#dom-authenticatorattestationresponse-attestationobject
     */
    FIDOPublicKeyCredential: {
      /**
       * credential id: identifier of pair of keys, base64 encoded
       * https://w3c.github.io/webauthn/#ref-for-dom-credential-id
       */
      id: string;
      /** raw credential id: identifier of pair of keys, base64 encoded */
      rawId: string;
      /** AuthenticatorAttestationResponse */
      response: {
        /** JSON string with client data */
        clientDataJSON: string;
        /** CBOR.encoded attestation object */
        attestationObject: string;
      };
      /** response type, we need only the type of public-key */
      type: 'public-key';
    };
    /**
     * A credential used to allow a user to prove their identity and access
     * to an account with a DFSP.
     *
     * SignedCredential is a special formatting of the credential to allow us to be
     * more explicit about the `status` field - it should only ever be PENDING when
     * updating a credential.
     */
    SignedCredential: {
      credentialType: components['schemas']['CredentialType'];
      /** The challenge has signed but not yet verified. */
      status: 'PENDING';
      payload: components['schemas']['FIDOPublicKeyCredential'];
    };
    /**
     * The object sent in a `POST /consents` request to AUTH-SERVICE by DFSP to store registered consent with PublicKey
     * and whatever needed to perform authorization validation later
     */
    ConsentsPostRequestAUTH: {
      /**
       * Common ID between the PISP and FSP for the Consent object
       * decided by the DFSP who creates the Consent
       * This field is REQUIRED for POST /consent.
       * creation of this Consent.
       */
      consentId: components['schemas']['CorrelationId'];
      scopes: components['schemas']['Scope'][];
      credential: components['schemas']['SignedCredential'];
    };
    /** The object sent in a `POST /consents` request to PISP by DFSP to ask for delivering the credential object. */
    ConsentsPostRequestPISP: {
      /**
       * Common ID between the PISP and FSP for the Consent object
       * decided by the DFSP who creates the Consent
       * This field is REQUIRED for POST /consent.
       */
      consentId: components['schemas']['CorrelationId'];
      /**
       * The id of the ConsentRequest that was used to initiate the
       * creation of this Consent.
       */
      consentRequestId: components['schemas']['CorrelationId'];
      scopes: components['schemas']['Scope'][];
    };
    /** The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error. */
    ErrorCode: string;
    /** Error description string. */
    ErrorDescription: string;
    /** Extension key. */
    ExtensionKey: string;
    /** Extension value. */
    ExtensionValue: string;
    /** Data model for the complex type Extension. */
    Extension: {
      key: components['schemas']['ExtensionKey'];
      value: components['schemas']['ExtensionValue'];
    };
    /** Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment. */
    ExtensionList: {
      /** Number of Extension elements. */
      extension: components['schemas']['Extension'][];
    };
    /** Data model for the complex type ErrorInformation. */
    ErrorInformation: {
      errorCode: components['schemas']['ErrorCode'];
      errorDescription: components['schemas']['ErrorDescription'];
      extensionList?: components['schemas']['ExtensionList'];
    };
    /** Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses. */
    ErrorInformationResponse: {
      errorInformation?: components['schemas']['ErrorInformation'];
    };
    /**
     * The HTTP request `PUT /consents/{ID}` is used by the PISP to update a Consent with a signed challenge and register a credential.
     * Called by a `PISP` to after signing a challenge. Sent to a DFSP for verification.
     */
    ConsentsIDPutResponseSigned: {
      scopes: components['schemas']['Scope'][];
      credential: components['schemas']['SignedCredential'];
    };
    /**
     * A credential used to allow a user to prove their identity and access
     * to an account with a DFSP.
     *
     * VerifiedCredential is a special formatting of the credential to allow us to be
     * more explicit about the `status` field - it should only ever be VERIFIED when
     * updating a credential.
     */
    VerifiedCredential: {
      credentialType: components['schemas']['CredentialType'];
      /** The Credential is valid, and ready to be used by the PISP. */
      status: 'VERIFIED';
      payload: components['schemas']['FIDOPublicKeyCredential'];
    };
    /**
     * The HTTP request `PUT /consents/{ID}` is used by the DFSP or Auth-Service to update a Consent object once it has been Verified.
     * Called by a `auth-service` to notify a DFSP that a credential has been verified and registered.
     */
    ConsentsIDPutResponseVerified: {
      scopes: components['schemas']['Scope'][];
      credential: components['schemas']['VerifiedCredential'];
    };
    /**
     * The status of the Consent.
     * - "VERIFIED" - The Consent is valid and verified.
     */
    ConsentStatusTypeVerified: 'VERIFIED';
    /**
     * PATCH /consents/{ID} request object.
     *
     * Sent by the DFSP to the PISP when a consent is verified.
     * Used in the "Register Credential" part of the Account linking flow.
     */
    ConsentsIDPatchResponseVerified: {
      credential: {
        status: components['schemas']['ConsentStatusTypeVerified'];
      };
    };
    /**
     * The status of the Consent.
     * - "REVOKED" - The Consent is no longer valid and has been revoked.
     */
    ConsentStatusTypeRevoked: 'REVOKED';
    /** The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC). */
    DateTime: string;
    /**
     * PATCH /consents/{ID} request object.
     *
     * Sent to both the PISP and DFSP when a consent is revoked.
     * Used in the "Unlinking" part of the Account Unlinking flow.
     */
    ConsentsIDPatchResponseRevoked: {
      status: components['schemas']['ConsentStatusTypeRevoked'];
      revokedAt: components['schemas']['DateTime'];
    };
    /** The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters. */
    BinaryString: string;
    /** The object sent in the PUT /thirdpartyRequests/transactions/{id}/authorizations request. */
    ThirdpartyRequestsTransactionsIDAuthorizationsPutResponse: {
      /** Base64 encoded binary string - the original challenge. */
      challenge: string;
      /** Base64 encoded binary string - the signed challenge. */
      value: components['schemas']['BinaryString'];
      /** Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which consent allows the PISP to initiate transaction. */
      consentId: components['schemas']['CorrelationId'];
      /** DFSP specific account identifiers, e.g. `dfspa.alice.1234` */
      sourceAccountId: components['schemas']['AccountId'];
      /** The status of the authorization. This value must be `VERIFIED` for a PUT request. */
      status: 'VERIFIED';
    };
    /** The object sent in the POST /thirdpartyRequests/transactions/{id}/authorizations request. */
    ThirdpartyRequestsTransactionsIDAuthorizationsPostRequest: {
      /** Base64 encoded binary string - the original challenge. */
      challenge: string;
      /** Base64 encoded binary string - the signed challenge */
      value: components['schemas']['BinaryString'];
      /** Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which constent allows the PISP to initiate transaction. */
      consentId: components['schemas']['CorrelationId'];
      /** DFSP specific account identifiers, e.g. `dfspa.alice.1234` */
      sourceAccountId: components['schemas']['AccountId'];
      /** The status of the authorization. This MUST be PENDING for a POST request */
      status: 'PENDING';
    };
  };
  responses: {
    /** OK */
    '200': {};
    /** Accepted */
    '202': {};
    /** Bad Request */
    '400': {
      content: {
        'application/json': components['schemas']['ErrorInformationResponse'];
      };
      headers: {
        'Content-Length': components['headers']['Content-Length'];
        'Content-Type': components['headers']['Content-Type'];
      };
    };
    /** Unauthorized */
    '401': {
      content: {
        'application/json': components['schemas']['ErrorInformationResponse'];
      };
      headers: {
        'Content-Length': components['headers']['Content-Length'];
        'Content-Type': components['headers']['Content-Type'];
      };
    };
    /** Forbidden */
    '403': {
      content: {
        'application/json': components['schemas']['ErrorInformationResponse'];
      };
      headers: {
        'Content-Length': components['headers']['Content-Length'];
        'Content-Type': components['headers']['Content-Type'];
      };
    };
    /** Not Found */
    '404': {
      content: {
        'application/json': components['schemas']['ErrorInformationResponse'];
      };
      headers: {
        'Content-Length': components['headers']['Content-Length'];
        'Content-Type': components['headers']['Content-Type'];
      };
    };
    /** Method Not Allowed */
    '405': {
      content: {
        'application/json': components['schemas']['ErrorInformationResponse'];
      };
      headers: {
        'Content-Length': components['headers']['Content-Length'];
        'Content-Type': components['headers']['Content-Type'];
      };
    };
    /** Not Acceptable */
    '406': {
      content: {
        'application/json': components['schemas']['ErrorInformationResponse'];
      };
      headers: {
        'Content-Length': components['headers']['Content-Length'];
        'Content-Type': components['headers']['Content-Type'];
      };
    };
    /** Not Implemented */
    '501': {
      content: {
        'application/json': components['schemas']['ErrorInformationResponse'];
      };
      headers: {
        'Content-Length': components['headers']['Content-Length'];
        'Content-Type': components['headers']['Content-Type'];
      };
    };
    /** Service Unavailable */
    '503': {
      content: {
        'application/json': components['schemas']['ErrorInformationResponse'];
      };
      headers: {
        'Content-Length': components['headers']['Content-Length'];
        'Content-Type': components['headers']['Content-Type'];
      };
    };
  };
}
