/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/health': {
    /** The HTTP request GET /health is used to return the current status of the API. */
    get: operations['HealthGet']
  }
  '/metrics': {
    /** The HTTP request GET /metrics is used to return metrics for the API. */
    get: operations['MetricsGet']
  }
  '/consents': {
    /** The **POST /consents** request is used to request the creation of a consent for interactions between a PISP and the DFSP who owns the account which a PISP’s customer wants to allow the PISP access to. */
    post: operations['PostConsents']
    parameters: {
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        'Content-Type': components['parameters']['Content-Type']
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components['parameters']['Date']
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        'X-Forwarded-For'?: components['parameters']['X-Forwarded-For']
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        'FSPIOP-Source': components['parameters']['FSPIOP-Source']
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        'FSPIOP-Destination'?: components['parameters']['FSPIOP-Destination']
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        'FSPIOP-Encryption'?: components['parameters']['FSPIOP-Encryption']
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        'FSPIOP-Signature'?: components['parameters']['FSPIOP-Signature']
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-URI'?: components['parameters']['FSPIOP-URI']
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-HTTP-Method'?: components['parameters']['FSPIOP-HTTP-Method']
      }
    }
  }
  '/participants/{Type}/{ID}': {
    /** The HTTP request `GET /participants/{Type}/{ID}` (or `GET /participants/{Type}/{ID}/{SubId}`) is used to find out in which FSP the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}`, is located (for example, `GET /participants/MSISDN/123456789`, or `GET /participants/BUSINESS/shoecompany/employee1`). This HTTP request should support a query string for filtering of currency. To use filtering of currency, the HTTP request `GET /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency. */
    get: operations['ParticipantsByTypeAndID']
    /** The callback `PUT /participants/{Type}/{ID}` (or `PUT /participants/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the lookup, creation, or deletion of the FSP information related to the Party. If the FSP information is deleted, the fspId element should be empty; otherwise the element should include the FSP information for the Party. */
    put: operations['ParticipantsByTypeAndID3']
    /** The HTTP request `POST /participants/{Type}/{ID}` (or `POST /participants/{Type}/{ID}/{SubId}`) is used to create information in the server regarding the provided identity, defined by `{Type}`, `{ID}`, and optionally `{SubId}` (for example, `POST /participants/MSISDN/123456789` or `POST /participants/BUSINESS/shoecompany/employee1`). An ExtensionList element has been added to this reqeust in version v1.1 */
    post: operations['ParticipantsByIDAndType']
    /**
     * The HTTP request `DELETE /participants/{Type}/{ID}` (or `DELETE /participants/{Type}/{ID}/{SubId}`) is used to delete information in the server regarding the provided identity, defined by `{Type}` and `{ID}`) (for example, `DELETE /participants/MSISDN/123456789`), and optionally `{SubId}`. This HTTP request should support a query string to delete FSP information regarding a specific currency only. To delete a specific currency only, the HTTP request `DELETE /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.
     *
     * **Note:** The Account Lookup System should verify that it is the Party’s current FSP that is deleting the FSP information.
     */
    delete: operations['ParticipantsByTypeAndID2']
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: components['parameters']['Type']
        /** The identifier value. */
        ID: components['parameters']['ID']
      }
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        'Content-Type': components['parameters']['Content-Type']
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components['parameters']['Date']
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        'X-Forwarded-For'?: components['parameters']['X-Forwarded-For']
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        'FSPIOP-Source': components['parameters']['FSPIOP-Source']
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        'FSPIOP-Destination'?: components['parameters']['FSPIOP-Destination']
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        'FSPIOP-Encryption'?: components['parameters']['FSPIOP-Encryption']
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        'FSPIOP-Signature'?: components['parameters']['FSPIOP-Signature']
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-URI'?: components['parameters']['FSPIOP-URI']
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-HTTP-Method'?: components['parameters']['FSPIOP-HTTP-Method']
      }
    }
  }
  '/participants/{Type}/{ID}/error': {
    /** If the server is unable to find, create or delete the associated FSP of the provided identity, or another processing error occurred, the error callback `PUT /participants/{Type}/{ID}/error` (or `PUT /participants/{Type}/{ID}/{SubId}/error`) is used. */
    put: operations['ParticipantsErrorByTypeAndID']
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: components['parameters']['Type']
        /** The identifier value. */
        ID: components['parameters']['ID']
      }
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        'Content-Type': components['parameters']['Content-Type']
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components['parameters']['Date']
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        'X-Forwarded-For'?: components['parameters']['X-Forwarded-For']
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        'FSPIOP-Source': components['parameters']['FSPIOP-Source']
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        'FSPIOP-Destination'?: components['parameters']['FSPIOP-Destination']
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        'FSPIOP-Encryption'?: components['parameters']['FSPIOP-Encryption']
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        'FSPIOP-Signature'?: components['parameters']['FSPIOP-Signature']
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-URI'?: components['parameters']['FSPIOP-URI']
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-HTTP-Method'?: components['parameters']['FSPIOP-HTTP-Method']
      }
    }
  }
  '/thirdpartyRequests/verifications': {
    /** The HTTP request `POST /thirdpartyRequests/verifications` is used by the DFSP to verify a third party authorization. */
    post: operations['PostThirdpartyRequestsVerifications']
    parameters: {
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        'Content-Type': components['parameters']['Content-Type']
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components['parameters']['Date']
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        'X-Forwarded-For'?: components['parameters']['X-Forwarded-For']
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        'FSPIOP-Source': components['parameters']['FSPIOP-Source']
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        'FSPIOP-Destination'?: components['parameters']['FSPIOP-Destination']
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        'FSPIOP-Encryption'?: components['parameters']['FSPIOP-Encryption']
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        'FSPIOP-Signature'?: components['parameters']['FSPIOP-Signature']
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-URI'?: components['parameters']['FSPIOP-URI']
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-HTTP-Method'?: components['parameters']['FSPIOP-HTTP-Method']
      }
    }
  }
}

export interface components {
  schemas: {
    /** The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error. */
    ErrorCode: string
    /** Error description string. */
    ErrorDescription: string
    /** Extension key. */
    ExtensionKey: string
    /** Extension value. */
    ExtensionValue: string
    /** Data model for the complex type Extension. */
    Extension: {
      key: components['schemas']['ExtensionKey']
      value: components['schemas']['ExtensionValue']
    }
    /** Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment. */
    ExtensionList: {
      /** Number of Extension elements. */
      extension: components['schemas']['Extension'][]
    }
    /** Data model for the complex type ErrorInformation. */
    ErrorInformation: {
      errorCode: components['schemas']['ErrorCode']
      errorDescription: components['schemas']['ErrorDescription']
      extensionList?: components['schemas']['ExtensionList']
    }
    /** Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses. */
    ErrorInformationResponse: {
      errorInformation?: components['schemas']['ErrorInformation']
    }
    /** Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘). */
    CorrelationId: string
    /**
     * The AccountAddress data type is a variable length string with a maximum size of 1023 characters and consists of:
     * Alphanumeric characters, upper or lower case. (Addresses are case-sensitive so that they can contain data encoded in formats such as base64url.)
     * - Underscore (_) - Tilde (~) - Hyphen (-) - Period (.) Addresses MUST NOT end in a period (.) character
     * An entity providing accounts to parties (i.e. a participant) can provide any value for an AccountAddress that is meaningful to that entity. It does not need to provide an address that makes the account identifiable outside the entity's domain.
     * IMPORTANT: The policy for defining addresses and the life-cycle of these is at the discretion of the address space owner (the payer DFSP in this case).
     * https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3212-accountaddress
     */
    AccountAddress: string
    /**
     * The ScopeAction element contains an access type which a PISP can request
     * from a DFSP, or which a DFSP can grant to a PISP.
     * It must be a member of the appropriate enumeration.
     *
     * - ACCOUNTS_GET_BALANCE: PISP can request a balance for the linked account
     * - ACCOUNTS_TRANSFER: PISP can request a transfer of funds from the linked account in the DFSP
     * - ACCOUNTS_STATEMENT: PISP can request a statement of individual transactions on a user's account
     */
    ScopeAction: 'ACCOUNTS_GET_BALANCE' | 'ACCOUNTS_TRANSFER' | 'ACCOUNTS_STATEMENT'
    /**
     * The Scope element contains an identifier defining, in the terms of a DFSP, an account on which access types can be requested or granted. It also defines the access types which are requested or granted.
     * https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32121-scope
     */
    Scope: {
      address: components['schemas']['AccountAddress']
      actions: components['schemas']['ScopeAction'][]
    }
    /**
     * The type of the Credential. - "FIDO" - The credential is based on a FIDO challenge. Its payload is a FIDOPublicKeyCredentialAttestation object. - "GENERIC" - The credential is based on a simple public key validation. Its payload is a GenericCredential object.
     * https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3226-credentialtype
     */
    CredentialType: 'FIDO' | 'GENERIC'
    /**
     * The status of the Credential.
     * - "PENDING" - The credential has been created, but has not been verified
     */
    CredentialStatusPending: 'PENDING'
    /** The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters. */
    BinaryString: string
    /** A publicKey + signature of a challenge for a generic public/private keypair. */
    GenericCredential: {
      publicKey: components['schemas']['BinaryString']
      signature: components['schemas']['BinaryString']
    }
    /**
     * A data model representing a FIDO Attestation result. Derived from
     * [`PublicKeyCredential` Interface](https://w3c.github.io/webauthn/#iface-pkcredential).
     *
     * The `PublicKeyCredential` interface represents the below fields with
     * a Type of Javascript [ArrayBuffer](https://heycam.github.io/webidl/#idl-ArrayBuffer).
     * For this API, we represent ArrayBuffers as base64 encoded utf-8 strings.
     */
    FIDOPublicKeyCredentialAttestation: {
      /**
       * credential id: identifier of pair of keys, base64 encoded
       * https://w3c.github.io/webauthn/#ref-for-dom-credential-id
       */
      id: string
      /** raw credential id: identifier of pair of keys, base64 encoded */
      rawId?: string
      /** AuthenticatorAttestationResponse */
      response: {
        /** JSON string with client data */
        clientDataJSON: string
        /** CBOR.encoded attestation object */
        attestationObject: string
      }
      /** response type, we need only the type of public-key */
      type: 'public-key'
    }
    /**
     * A credential used to allow a user to prove their identity and access
     * to an account with a DFSP.
     *
     * SignedCredential is a special formatting of the credential to allow us to be
     * more explicit about the `status` field - it should only ever be PENDING when
     * updating a credential.
     */
    SignedCredential: {
      credentialType: components['schemas']['CredentialType']
      status: components['schemas']['CredentialStatusPending']
      genericPayload?: components['schemas']['GenericCredential']
      fidoPayload?: components['schemas']['FIDOPublicKeyCredentialAttestation']
    }
    /**
     * Allowed values for the enumeration ConsentStatus
     * - ISSUED - The consent has been issued by the DFSP
     * - REVOKED - The consent has been revoked
     */
    ConsentStatus: 'ISSUED' | 'REVOKED'
    /**
     * The object sent in a `POST /consents` request to the Auth-Service
     * by a DFSP to store registered Consent and credential
     */
    ConsentsPostRequestAUTH: {
      /**
       * Common ID between the PISP and FSP for the Consent object
       * determined by the DFSP who creates the Consent.
       */
      consentId: components['schemas']['CorrelationId']
      consentRequestId?: components['schemas']['CorrelationId']
      scopes: components['schemas']['Scope'][]
      credential: components['schemas']['SignedCredential']
      status: components['schemas']['ConsentStatus']
      extensionList?: components['schemas']['ExtensionList']
    }
    /** The provisional Consent object sent by the DFSP in `POST /consents`. */
    ConsentsPostRequestPISP: {
      /**
       * Common ID between the PISP and the Payer DFSP for the consent object. The ID
       * should be reused for re-sends of the same consent. A new ID should be generated
       * for each new consent.
       */
      consentId: components['schemas']['CorrelationId']
      /** The ID given to the original consent request on which this consent is based. */
      consentRequestId: components['schemas']['CorrelationId']
      scopes: components['schemas']['Scope'][]
      status: components['schemas']['ConsentStatus']
      extensionList?: components['schemas']['ExtensionList']
    }
    /** FSP identifier. */
    FspId: string
    /** The object sent in the PUT /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID} callbacks. */
    ParticipantsTypeIDPutResponse: {
      fspId?: components['schemas']['FspId']
    }
    /** The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies. */
    Currency:
      | 'AED'
      | 'AFN'
      | 'ALL'
      | 'AMD'
      | 'ANG'
      | 'AOA'
      | 'ARS'
      | 'AUD'
      | 'AWG'
      | 'AZN'
      | 'BAM'
      | 'BBD'
      | 'BDT'
      | 'BGN'
      | 'BHD'
      | 'BIF'
      | 'BMD'
      | 'BND'
      | 'BOB'
      | 'BRL'
      | 'BSD'
      | 'BTN'
      | 'BWP'
      | 'BYN'
      | 'BZD'
      | 'CAD'
      | 'CDF'
      | 'CHF'
      | 'CLP'
      | 'CNY'
      | 'COP'
      | 'CRC'
      | 'CUC'
      | 'CUP'
      | 'CVE'
      | 'CZK'
      | 'DJF'
      | 'DKK'
      | 'DOP'
      | 'DZD'
      | 'EGP'
      | 'ERN'
      | 'ETB'
      | 'EUR'
      | 'FJD'
      | 'FKP'
      | 'GBP'
      | 'GEL'
      | 'GGP'
      | 'GHS'
      | 'GIP'
      | 'GMD'
      | 'GNF'
      | 'GTQ'
      | 'GYD'
      | 'HKD'
      | 'HNL'
      | 'HRK'
      | 'HTG'
      | 'HUF'
      | 'IDR'
      | 'ILS'
      | 'IMP'
      | 'INR'
      | 'IQD'
      | 'IRR'
      | 'ISK'
      | 'JEP'
      | 'JMD'
      | 'JOD'
      | 'JPY'
      | 'KES'
      | 'KGS'
      | 'KHR'
      | 'KMF'
      | 'KPW'
      | 'KRW'
      | 'KWD'
      | 'KYD'
      | 'KZT'
      | 'LAK'
      | 'LBP'
      | 'LKR'
      | 'LRD'
      | 'LSL'
      | 'LYD'
      | 'MAD'
      | 'MDL'
      | 'MGA'
      | 'MKD'
      | 'MMK'
      | 'MNT'
      | 'MOP'
      | 'MRO'
      | 'MUR'
      | 'MVR'
      | 'MWK'
      | 'MXN'
      | 'MYR'
      | 'MZN'
      | 'NAD'
      | 'NGN'
      | 'NIO'
      | 'NOK'
      | 'NPR'
      | 'NZD'
      | 'OMR'
      | 'PAB'
      | 'PEN'
      | 'PGK'
      | 'PHP'
      | 'PKR'
      | 'PLN'
      | 'PYG'
      | 'QAR'
      | 'RON'
      | 'RSD'
      | 'RUB'
      | 'RWF'
      | 'SAR'
      | 'SBD'
      | 'SCR'
      | 'SDG'
      | 'SEK'
      | 'SGD'
      | 'SHP'
      | 'SLL'
      | 'SOS'
      | 'SPL'
      | 'SRD'
      | 'STD'
      | 'SVC'
      | 'SYP'
      | 'SZL'
      | 'THB'
      | 'TJS'
      | 'TMT'
      | 'TND'
      | 'TOP'
      | 'TRY'
      | 'TTD'
      | 'TVD'
      | 'TWD'
      | 'TZS'
      | 'UAH'
      | 'UGX'
      | 'USD'
      | 'UYU'
      | 'UZS'
      | 'VEF'
      | 'VND'
      | 'VUV'
      | 'WST'
      | 'XAF'
      | 'XCD'
      | 'XDR'
      | 'XOF'
      | 'XPF'
      | 'XTS'
      | 'XXX'
      | 'YER'
      | 'ZAR'
      | 'ZMW'
      | 'ZWD'
    /** The object sent in the POST /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID} requests. An additional optional ExtensionList element has been added as part of v1.1 changes. */
    ParticipantsTypeIDSubIDPostRequest: {
      fspId: components['schemas']['FspId']
      currency?: components['schemas']['Currency']
      extensionList?: components['schemas']['ExtensionList']
    }
    /** Data model for the complex type object that contains ErrorInformation. */
    ErrorInformationObject: {
      errorInformation: components['schemas']['ErrorInformation']
    }
    /** Describes a challenge that has been signed with FIDO Attestation flows */
    SignedPayloadTypeFIDO: 'FIDO'
    /**
     * A data model representing a FIDO Assertion result.
     * Derived from PublicKeyCredential Interface in WebAuthN.
     *
     * The PublicKeyCredential interface represents the below fields with a Type of
     * Javascript ArrayBuffer.
     * For this API, we represent ArrayBuffers as base64 encoded utf-8 strings.
     *
     * https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32128-fidopublickeycredentialassertion
     */
    FIDOPublicKeyCredentialAssertion: {
      /**
       * credential id: identifier of pair of keys, base64 encoded
       * https://w3c.github.io/webauthn/#ref-for-dom-credential-id
       */
      id: string
      /** raw credential id: identifier of pair of keys, base64 encoded. */
      rawId: string
      /** AuthenticatorAssertionResponse */
      response: {
        /** Authenticator data object. */
        authenticatorData: string
        /** JSON string with client data. */
        clientDataJSON: string
        /** The signature generated by the private key associated with this credential. */
        signature: string
        /**
         * This field is optionally provided by the authenticator, and
         * represents the user.id that was supplied during registration.
         */
        userHandle?: string
      }
      /** response type, we need only the type of public-key */
      type: 'public-key'
    }
    /** The object sent in the POST /thirdpartyRequests/verifications request. */
    ThirdpartyRequestsVerificationsPostRequestFIDO: {
      verificationRequestId: components['schemas']['CorrelationId']
      /** Base64 encoded bytes - The challenge generated by the DFSP. */
      challenge: string
      /**
       * The id of the stored consent object that contains the credential with which to verify
       * the signed challenge against.
       */
      consentId: components['schemas']['CorrelationId']
      signedPayloadType: components['schemas']['SignedPayloadTypeFIDO']
      fidoSignedPayload: components['schemas']['FIDOPublicKeyCredentialAssertion']
      extensionList?: components['schemas']['ExtensionList']
    }
    /** Describes a challenge that has been signed with a private key */
    SignedPayloadTypeGeneric: 'GENERIC'
    /** The object sent in the POST /thirdpartyRequests/verifications request. */
    ThirdpartyRequestsVerificationsPostRequestGeneric: {
      verificationRequestId: components['schemas']['CorrelationId']
      /** Base64 encoded bytes - The challenge generated by the DFSP. */
      challenge: string
      /**
       * The id of the stored consent object that contains the credential with which to verify
       * the signed challenge against.
       */
      consentId: components['schemas']['CorrelationId']
      signedPayloadType: components['schemas']['SignedPayloadTypeGeneric']
      genericSignedPayload: components['schemas']['BinaryString']
      extensionList?: components['schemas']['ExtensionList']
    }
  }
  responses: {
    /** OK */
    200: unknown
    /** Accepted */
    202: unknown
    /** Bad Request */
    400: {
      headers: {}
      content: {
        'application/json': components['schemas']['ErrorInformationResponse']
      }
    }
    /** Unauthorized */
    401: {
      headers: {}
      content: {
        'application/json': components['schemas']['ErrorInformationResponse']
      }
    }
    /** Forbidden */
    403: {
      headers: {}
      content: {
        'application/json': components['schemas']['ErrorInformationResponse']
      }
    }
    /** Not Found */
    404: {
      headers: {}
      content: {
        'application/json': components['schemas']['ErrorInformationResponse']
      }
    }
    /** Method Not Allowed */
    405: {
      headers: {}
      content: {
        'application/json': components['schemas']['ErrorInformationResponse']
      }
    }
    /** Not Acceptable */
    406: {
      headers: {}
      content: {
        'application/json': components['schemas']['ErrorInformationResponse']
      }
    }
    /** Not Implemented */
    501: {
      headers: {}
      content: {
        'application/json': components['schemas']['ErrorInformationResponse']
      }
    }
    /** Service Unavailable */
    503: {
      headers: {}
      content: {
        'application/json': components['schemas']['ErrorInformationResponse']
      }
    }
  }
  parameters: {
    /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
    'Content-Type': string
    /** The `Date` header field indicates the date when the request was sent. */
    Date: string
    /**
     * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
     *
     * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
     */
    'X-Forwarded-For': string
    /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
    'FSPIOP-Source': string
    /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
    'FSPIOP-Destination': string
    /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
    'FSPIOP-Encryption': string
    /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
    'FSPIOP-Signature': string
    /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
    'FSPIOP-URI': string
    /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
    'FSPIOP-HTTP-Method': string
    /** The `Accept` header field indicates the version of the API the client would like the server to use. */
    Accept: string
    /**
     * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
     *
     * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
     */
    'Content-Length': number
    /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
    Type: string
    /** The identifier value. */
    ID: string
  }
  headers: {
    /**
     * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
     *
     * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
     */
    'Content-Length'?: number
    /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
    'Content-Type': string
  }
}

export interface operations {
  /** The HTTP request GET /health is used to return the current status of the API. */
  HealthGet: {
    responses: {
      200: components['responses']['200']
      400: components['responses']['400']
      401: components['responses']['401']
      403: components['responses']['403']
      404: components['responses']['404']
      405: components['responses']['405']
      406: components['responses']['406']
      501: components['responses']['501']
      503: components['responses']['503']
    }
  }
  /** The HTTP request GET /metrics is used to return metrics for the API. */
  MetricsGet: {
    responses: {
      200: components['responses']['200']
      400: components['responses']['400']
      401: components['responses']['401']
      403: components['responses']['403']
      404: components['responses']['404']
      405: components['responses']['405']
      406: components['responses']['406']
      501: components['responses']['501']
      503: components['responses']['503']
    }
  }
  /** The **POST /consents** request is used to request the creation of a consent for interactions between a PISP and the DFSP who owns the account which a PISP’s customer wants to allow the PISP access to. */
  PostConsents: {
    parameters: {
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        'Content-Type': components['parameters']['Content-Type']
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components['parameters']['Date']
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        'X-Forwarded-For'?: components['parameters']['X-Forwarded-For']
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        'FSPIOP-Source': components['parameters']['FSPIOP-Source']
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        'FSPIOP-Destination'?: components['parameters']['FSPIOP-Destination']
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        'FSPIOP-Encryption'?: components['parameters']['FSPIOP-Encryption']
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        'FSPIOP-Signature'?: components['parameters']['FSPIOP-Signature']
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-URI'?: components['parameters']['FSPIOP-URI']
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-HTTP-Method'?: components['parameters']['FSPIOP-HTTP-Method']
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components['parameters']['Accept']
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        'Content-Length'?: components['parameters']['Content-Length']
      }
    }
    responses: {
      202: components['responses']['202']
      400: components['responses']['400']
      401: components['responses']['401']
      403: components['responses']['403']
      404: components['responses']['404']
      405: components['responses']['405']
      406: components['responses']['406']
      501: components['responses']['501']
      503: components['responses']['503']
    }
    requestBody: {
      content: {
        'application/json':
          | components['schemas']['ConsentsPostRequestAUTH']
          | components['schemas']['ConsentsPostRequestPISP']
      }
    }
  }
  /** The HTTP request `GET /participants/{Type}/{ID}` (or `GET /participants/{Type}/{ID}/{SubId}`) is used to find out in which FSP the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}`, is located (for example, `GET /participants/MSISDN/123456789`, or `GET /participants/BUSINESS/shoecompany/employee1`). This HTTP request should support a query string for filtering of currency. To use filtering of currency, the HTTP request `GET /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency. */
  ParticipantsByTypeAndID: {
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: components['parameters']['Type']
        /** The identifier value. */
        ID: components['parameters']['ID']
      }
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        'Content-Type': components['parameters']['Content-Type']
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components['parameters']['Date']
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        'X-Forwarded-For'?: components['parameters']['X-Forwarded-For']
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        'FSPIOP-Source': components['parameters']['FSPIOP-Source']
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        'FSPIOP-Destination'?: components['parameters']['FSPIOP-Destination']
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        'FSPIOP-Encryption'?: components['parameters']['FSPIOP-Encryption']
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        'FSPIOP-Signature'?: components['parameters']['FSPIOP-Signature']
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-URI'?: components['parameters']['FSPIOP-URI']
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-HTTP-Method'?: components['parameters']['FSPIOP-HTTP-Method']
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components['parameters']['Accept']
      }
    }
    responses: {
      202: components['responses']['202']
      400: components['responses']['400']
      401: components['responses']['401']
      403: components['responses']['403']
      404: components['responses']['404']
      405: components['responses']['405']
      406: components['responses']['406']
      501: components['responses']['501']
      503: components['responses']['503']
    }
  }
  /** The callback `PUT /participants/{Type}/{ID}` (or `PUT /participants/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the lookup, creation, or deletion of the FSP information related to the Party. If the FSP information is deleted, the fspId element should be empty; otherwise the element should include the FSP information for the Party. */
  ParticipantsByTypeAndID3: {
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: components['parameters']['Type']
        /** The identifier value. */
        ID: components['parameters']['ID']
      }
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        'Content-Type': components['parameters']['Content-Type']
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components['parameters']['Date']
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        'X-Forwarded-For'?: components['parameters']['X-Forwarded-For']
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        'FSPIOP-Source': components['parameters']['FSPIOP-Source']
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        'FSPIOP-Destination'?: components['parameters']['FSPIOP-Destination']
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        'FSPIOP-Encryption'?: components['parameters']['FSPIOP-Encryption']
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        'FSPIOP-Signature'?: components['parameters']['FSPIOP-Signature']
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-URI'?: components['parameters']['FSPIOP-URI']
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-HTTP-Method'?: components['parameters']['FSPIOP-HTTP-Method']
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        'Content-Length'?: components['parameters']['Content-Length']
      }
    }
    responses: {
      200: components['responses']['200']
      400: components['responses']['400']
      401: components['responses']['401']
      403: components['responses']['403']
      404: components['responses']['404']
      405: components['responses']['405']
      406: components['responses']['406']
      501: components['responses']['501']
      503: components['responses']['503']
    }
    /** Participant information returned. */
    requestBody: {
      content: {
        'application/json': components['schemas']['ParticipantsTypeIDPutResponse']
      }
    }
  }
  /** The HTTP request `POST /participants/{Type}/{ID}` (or `POST /participants/{Type}/{ID}/{SubId}`) is used to create information in the server regarding the provided identity, defined by `{Type}`, `{ID}`, and optionally `{SubId}` (for example, `POST /participants/MSISDN/123456789` or `POST /participants/BUSINESS/shoecompany/employee1`). An ExtensionList element has been added to this reqeust in version v1.1 */
  ParticipantsByIDAndType: {
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: components['parameters']['Type']
        /** The identifier value. */
        ID: components['parameters']['ID']
      }
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        'Content-Type': components['parameters']['Content-Type']
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components['parameters']['Date']
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        'X-Forwarded-For'?: components['parameters']['X-Forwarded-For']
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        'FSPIOP-Source': components['parameters']['FSPIOP-Source']
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        'FSPIOP-Destination'?: components['parameters']['FSPIOP-Destination']
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        'FSPIOP-Encryption'?: components['parameters']['FSPIOP-Encryption']
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        'FSPIOP-Signature'?: components['parameters']['FSPIOP-Signature']
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-URI'?: components['parameters']['FSPIOP-URI']
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-HTTP-Method'?: components['parameters']['FSPIOP-HTTP-Method']
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components['parameters']['Accept']
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        'Content-Length'?: components['parameters']['Content-Length']
      }
    }
    responses: {
      202: components['responses']['202']
      400: components['responses']['400']
      401: components['responses']['401']
      403: components['responses']['403']
      404: components['responses']['404']
      405: components['responses']['405']
      406: components['responses']['406']
      501: components['responses']['501']
      503: components['responses']['503']
    }
    /** Participant information to be created. */
    requestBody: {
      content: {
        'application/json': components['schemas']['ParticipantsTypeIDSubIDPostRequest']
      }
    }
  }
  /**
   * The HTTP request `DELETE /participants/{Type}/{ID}` (or `DELETE /participants/{Type}/{ID}/{SubId}`) is used to delete information in the server regarding the provided identity, defined by `{Type}` and `{ID}`) (for example, `DELETE /participants/MSISDN/123456789`), and optionally `{SubId}`. This HTTP request should support a query string to delete FSP information regarding a specific currency only. To delete a specific currency only, the HTTP request `DELETE /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.
   *
   * **Note:** The Account Lookup System should verify that it is the Party’s current FSP that is deleting the FSP information.
   */
  ParticipantsByTypeAndID2: {
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: components['parameters']['Type']
        /** The identifier value. */
        ID: components['parameters']['ID']
      }
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        'Content-Type': components['parameters']['Content-Type']
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components['parameters']['Date']
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        'X-Forwarded-For'?: components['parameters']['X-Forwarded-For']
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        'FSPIOP-Source': components['parameters']['FSPIOP-Source']
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        'FSPIOP-Destination'?: components['parameters']['FSPIOP-Destination']
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        'FSPIOP-Encryption'?: components['parameters']['FSPIOP-Encryption']
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        'FSPIOP-Signature'?: components['parameters']['FSPIOP-Signature']
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-URI'?: components['parameters']['FSPIOP-URI']
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-HTTP-Method'?: components['parameters']['FSPIOP-HTTP-Method']
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components['parameters']['Accept']
      }
    }
    responses: {
      202: components['responses']['202']
      400: components['responses']['400']
      401: components['responses']['401']
      403: components['responses']['403']
      404: components['responses']['404']
      405: components['responses']['405']
      406: components['responses']['406']
      501: components['responses']['501']
      503: components['responses']['503']
    }
  }
  /** If the server is unable to find, create or delete the associated FSP of the provided identity, or another processing error occurred, the error callback `PUT /participants/{Type}/{ID}/error` (or `PUT /participants/{Type}/{ID}/{SubId}/error`) is used. */
  ParticipantsErrorByTypeAndID: {
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: components['parameters']['Type']
        /** The identifier value. */
        ID: components['parameters']['ID']
      }
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        'Content-Type': components['parameters']['Content-Type']
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components['parameters']['Date']
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        'X-Forwarded-For'?: components['parameters']['X-Forwarded-For']
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        'FSPIOP-Source': components['parameters']['FSPIOP-Source']
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        'FSPIOP-Destination'?: components['parameters']['FSPIOP-Destination']
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        'FSPIOP-Encryption'?: components['parameters']['FSPIOP-Encryption']
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        'FSPIOP-Signature'?: components['parameters']['FSPIOP-Signature']
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-URI'?: components['parameters']['FSPIOP-URI']
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-HTTP-Method'?: components['parameters']['FSPIOP-HTTP-Method']
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        'Content-Length'?: components['parameters']['Content-Length']
      }
    }
    responses: {
      200: components['responses']['200']
      400: components['responses']['400']
      401: components['responses']['401']
      403: components['responses']['403']
      404: components['responses']['404']
      405: components['responses']['405']
      406: components['responses']['406']
      501: components['responses']['501']
      503: components['responses']['503']
    }
    /** Details of the error returned. */
    requestBody: {
      content: {
        'application/json': components['schemas']['ErrorInformationObject']
      }
    }
  }
  /** The HTTP request `POST /thirdpartyRequests/verifications` is used by the DFSP to verify a third party authorization. */
  PostThirdpartyRequestsVerifications: {
    parameters: {
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        'Content-Type': components['parameters']['Content-Type']
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components['parameters']['Date']
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        'X-Forwarded-For'?: components['parameters']['X-Forwarded-For']
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        'FSPIOP-Source': components['parameters']['FSPIOP-Source']
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        'FSPIOP-Destination'?: components['parameters']['FSPIOP-Destination']
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        'FSPIOP-Encryption'?: components['parameters']['FSPIOP-Encryption']
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        'FSPIOP-Signature'?: components['parameters']['FSPIOP-Signature']
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-URI'?: components['parameters']['FSPIOP-URI']
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        'FSPIOP-HTTP-Method'?: components['parameters']['FSPIOP-HTTP-Method']
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components['parameters']['Accept']
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        'Content-Length'?: components['parameters']['Content-Length']
      }
    }
    responses: {
      202: components['responses']['202']
      400: components['responses']['400']
      401: components['responses']['401']
      403: components['responses']['403']
      404: components['responses']['404']
      405: components['responses']['405']
      406: components['responses']['406']
      501: components['responses']['501']
      503: components['responses']['503']
    }
    /** The thirdparty authorization details to verify */
    requestBody: {
      content: {
        'application/json':
          | components['schemas']['ThirdpartyRequestsVerificationsPostRequestFIDO']
          | components['schemas']['ThirdpartyRequestsVerificationsPostRequestGeneric']
      }
    }
  }
}

export interface external {}
