swagger: '2.0'
info:
  title: Mojaloop Auth-Service API
  version: '0.1.0'
  description: An API a central auth service in Mojaloop, concerned with creating \nand managing Consents and validating thirdparty transactions
  license:
    name: Open API for FSP Interoperability (FSPIOP) (Implementation Friendly Version)
basePath: /
schemes:
  - http
produces:
  - application/json
paths:
  /health:
    get:
      produces:
        - application/json
      tags:
        - health
      responses:
        '200':
          $ref: '#/responses/ResponseHealth200'
        '400':
          $ref: '#/responses/ErrorResponse400'
        '401':
          $ref: '#/responses/ErrorResponse401'
        '403':
          $ref: '#/responses/ErrorResponse403'
        '404':
          $ref: '#/responses/ErrorResponse404'
        '405':
          $ref: '#/responses/ErrorResponse405'
        '406':
          $ref: '#/responses/ErrorResponse406'
        '501':
          $ref: '#/responses/ErrorResponse501'
        '503':
          $ref: '#/responses/ErrorResponse503'
      operationId: HealthGet
      summary: Get Server
      description: The HTTP request GET /health is used to return the current status of the API.
  /metrics:
    get:
      produces:
        - application/json
      tags:
        - metrics
      responses:
        '200':
          $ref: '#/responses/ResponseHealth200'
        '400':
          $ref: '#/responses/ErrorResponse400'
        '401':
          $ref: '#/responses/ErrorResponse401'
        '403':
          $ref: '#/responses/ErrorResponse403'
        '404':
          $ref: '#/responses/ErrorResponse404'
        '405':
          $ref: '#/responses/ErrorResponse405'
        '406':
          $ref: '#/responses/ErrorResponse406'
        '501':
          $ref: '#/responses/ErrorResponse501'
        '503':
          $ref: '#/responses/ErrorResponse503'
      operationId: MetricsGet
      summary: Prometheus metrics endpoint
      description: The HTTP request GET /metrics is used to return metrics for the API.
  /hello:
    get:
      produces:
        - application/json
      tags:
        - metrics
      responses:
        '200':
          $ref: '#/responses/ResponseHealth200'
        '400':
          $ref: '#/responses/ErrorResponse400'
        '401':
          $ref: '#/responses/ErrorResponse401'
        '403':
          $ref: '#/responses/ErrorResponse403'
        '404':
          $ref: '#/responses/ErrorResponse404'
        '405':
          $ref: '#/responses/ErrorResponse405'
        '406':
          $ref: '#/responses/ErrorResponse406'
        '501':
          $ref: '#/responses/ErrorResponse501'
        '503':
          $ref: '#/responses/ErrorResponse503'
      operationId: HelloGet
      summary: example get
      description: The HTTP request GET /hello is used to return some example json.

  /consents:
    post:
      description: |
        The HTTP request `POST /consents` is used to create a consent object. 
        
        - Called by `DFSP` after the succesful creation and validation of a consentRequest.
      summary: CreateConsent
      tags:
        - consent
      operationId: CreateConsent
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Consent'
        # Headers
        - $ref: '#/parameters/Content-Length'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/Date'
        - $ref: '#/parameters/X-Forwarded-For'
        - $ref: '#/parameters/FSPIOP-Source'
        - $ref: '#/parameters/FSPIOP-Destination'
        - $ref: '#/parameters/FSPIOP-Encryption'
        - $ref: '#/parameters/FSPIOP-Signature'
        - $ref: '#/parameters/FSPIOP-URI'
        - $ref: '#/parameters/FSPIOP-HTTP-Method'
      x-examples:
        application/json:
          id: '123'
          requestId: '456'
          initiatorId: 'pispa'
          participantId: 'dfspa'
          scopes:
            - scope: 'account.balanceInquiry'
              accountId: 'dfspa.alice.1234'
            - scope: 'account.sendTransfer'
              accountId: 'dfspa.alice.1234'
            - scope: 'account.sendTransfer'
              accountId: 'dfspa.alice.5678'
          credential: null
      responses:
        202:
          $ref: '#/responses/Response202'
        400:
          $ref: '#/responses/ErrorResponse400'
        401:
          $ref: '#/responses/ErrorResponse401'
        403:
          $ref: '#/responses/ErrorResponse403'
        404:
          $ref: '#/responses/ErrorResponse404'
        405:
          $ref: '#/responses/ErrorResponse405'
        406:
          $ref: '#/responses/ErrorResponse406'
        501:
          $ref: '#/responses/ErrorResponse501'
        503:
          $ref: '#/responses/ErrorResponse503'


  /consents/{ID}:
    parameters:
      #Path
      - $ref: '#/parameters/ID'
      #Headers
      - $ref: '#/parameters/Content-Type'
      - $ref: '#/parameters/Date'
      - $ref: '#/parameters/X-Forwarded-For'
      - $ref: '#/parameters/FSPIOP-Source'
      - $ref: '#/parameters/FSPIOP-Destination'
      - $ref: '#/parameters/FSPIOP-Encryption'
      - $ref: '#/parameters/FSPIOP-Signature'
      - $ref: '#/parameters/FSPIOP-URI'
      - $ref: '#/parameters/FSPIOP-HTTP-Method'
    get:
      description: >
        The HTTP request `GET /consents/{ID}` is used to get information regarding a consent object created or requested earlier. 
        The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.
      summary: GetConsent
      tags:
        - consent
      operationId: GetConsent
      parameters:
        #Headers
        - $ref: '#/parameters/Accept'
      responses:
        202:
          $ref: '#/responses/Response202'
        400:
          $ref: '#/responses/ErrorResponse400'
        401:
          $ref: '#/responses/ErrorResponse401'
        403:
          $ref: '#/responses/ErrorResponse403'
        404:
          $ref: '#/responses/ErrorResponse404'
        405:
          $ref: '#/responses/ErrorResponse405'
        406:
          $ref: '#/responses/ErrorResponse406'
        501:
          $ref: '#/responses/ErrorResponse501'
        503:
          $ref: '#/responses/ErrorResponse503'

    put:
      description: |
        The HTTP request `PUT /consents/{ID}` is used to update a specified consent object. 
        The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.

        - Called by a `auth-service` to add the credential details
        
        - Called by a `PISP` to add a signature of the challenge
      summary: UpdateConsent
      tags:
        - consent
      operationId: UpdateConsent
      parameters:
        #Body
        - name: body
          in: body
          # TODO: change me to UpdateConsentRequest
          schema:
            $ref: '#/definitions/Consent'
        #Headers
        - $ref: '#/parameters/Content-Length'
      x-examples:
        application/json:
          requestId: '456'
          initiatorId: 'dfspa'
          participantId: 'pispa'
          scopes:
            - scope: 'account.balanceInquiry'
              accountId: 'dfspa.alice.1234'
            - scope: 'account.sendTransfer'
              accountId: 'dfspa.alice.1234'
            - scope: 'account.sendTransfer'
              accountId: 'dfspa.alice.5678'
          credential:
            id: '5678'
            credentialType: 'FIDO'
            credentialStatus: 'ACTIVE'
            challenge:
              payload: 'base64(...)'
              signature: 'base64(...)'
            payload: 'base64(...)'
      responses:
        202:
          $ref: '#/responses/Response202'
        400:
          $ref: '#/responses/ErrorResponse400'
        401:
          $ref: '#/responses/ErrorResponse401'
        403:
          $ref: '#/responses/ErrorResponse403'
        404:
          $ref: '#/responses/ErrorResponse404'
        405:
          $ref: '#/responses/ErrorResponse405'
        406:
          $ref: '#/responses/ErrorResponse406'
        501:
          $ref: '#/responses/ErrorResponse501'
        503:
          $ref: '#/responses/ErrorResponse503'
  
  /consents/{ID}/generateChallenge:
    post:
      description: |
        The HTTP request `POST /consents/{ID}/generateChallenge` is used to create a credential for the given Consent object. 
        The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.

        - Called by a `PISP` to request a challenge from the `auth-service`, which will be returned to the PISP via `PUT /consents/{ID}`
      summary: GenerateChallengeRequest
      tags:
        - consent
      operationId: GenerateChallengeRequest
      parameters:
        #Path
        - $ref: '#/parameters/ID'
        #Body
        - name: body
          in: body
          schema:
            $ref: '#/definitions/GenerateChallengeRequest'
        #Headers
        - $ref: '#/parameters/Content-Length'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/Date'
        - $ref: '#/parameters/X-Forwarded-For'
        - $ref: '#/parameters/FSPIOP-Source'
        - $ref: '#/parameters/FSPIOP-Destination'
        - $ref: '#/parameters/FSPIOP-Encryption'
        - $ref: '#/parameters/FSPIOP-Signature'
        - $ref: '#/parameters/FSPIOP-URI'
        - $ref: '#/parameters/FSPIOP-HTTP-Method'
      x-examples:
        application/json:
          {
          
          }
      responses:
        202:
          $ref: '#/responses/Response202'
        400:
          $ref: '#/responses/ErrorResponse400'
        401:
          $ref: '#/responses/ErrorResponse401'
        403:
          $ref: '#/responses/ErrorResponse403'
        404:
          $ref: '#/responses/ErrorResponse404'
        405:
          $ref: '#/responses/ErrorResponse405'
        406:
          $ref: '#/responses/ErrorResponse406'
        501:
          $ref: '#/responses/ErrorResponse501'
        503:
          $ref: '#/responses/ErrorResponse503'

  #thirdPartyRequests
  /thirdPartyRequests/transactions/{ID}/authorizations:
    post:
      description: |
        The HTTP request `POST /thirdPartyRequests/transactions/{id}/authorizations` is called by
        the DFSP to check that a ThirdPartyRequest is valid

      summary: ThirdpartyAuthorizationRequest
      tags:
        - thirdPartyRequests
      operationId: VerifyThirdPartyAuthorization
      parameters:
        #Path
        - $ref: '#/parameters/ID'
        #Body
        - name: body
          in: body
          schema:
            $ref: '#/definitions/ThirdPartyAuthorizationRequest'
        #Headers
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/Content-Length'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/Date'
        - $ref: '#/parameters/X-Forwarded-For'
        - $ref: '#/parameters/FSPIOP-Source'
        - $ref: '#/parameters/FSPIOP-Destination'
        - $ref: '#/parameters/FSPIOP-Encryption'
        - $ref: '#/parameters/FSPIOP-Signature'
        - $ref: '#/parameters/FSPIOP-URI'
        - $ref: '#/parameters/FSPIOP-HTTP-Method'
      x-examples:
        application/json:
          {
            #from ""PUT /quotes/456"" callback
            challenge: "<QuoteResponse object>",
            #from `PUT /authorizations/123` callback: `.authenticationInfo.authenticationValue.pinValue`
            value: "<base64 encoded binary - the signed quote response object>",
            #from `thirdpartyRequests/transactions` body
            consentId: "111",
            sourceAccountId: "dfspa.1111-2222",
            status: "PENDING"
          }
      responses:
        202:
          $ref: '#/responses/Response202'
        400:
          $ref: '#/responses/ErrorResponse400'
        401:
          $ref: '#/responses/ErrorResponse401'
        403:
          $ref: '#/responses/ErrorResponse403'
        404:
          $ref: '#/responses/ErrorResponse404'
        405:
          $ref: '#/responses/ErrorResponse405'
        406:
          $ref: '#/responses/ErrorResponse406'
        501:
          $ref: '#/responses/ErrorResponse501'
        503:
          $ref: '#/responses/ErrorResponse503'

definitions:
  $ref: ./src/interface/definitions.yaml
parameters:
  $ref: ./src/interface/parameters.yaml
responses:
  $ref: ./src/interface/responses.yaml
